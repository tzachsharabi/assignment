{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport MusicCard from \"./components/musicCard\";\nimport { db } from \"./components/db.js\";\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playPlayer = action => {\n      this.setState({\n        shouldPlayerPause: false\n      });\n      this.play();\n    };\n\n    this.pause = action => {\n      this.setState({\n        shouldPlayerPause: true\n      });\n    };\n\n    this.handleListClick = action => {\n      this.setState({\n        shouldPlayerPause: true,\n        showPlayer: false\n      });\n    };\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      showPlayer: false,\n      shouldPlayerPause: false\n    };\n  }\n\n  componentDidMount() {\n    this.getRecords();\n  }\n\n  async getRecords() {\n    try {\n      const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n        // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n        method: 'get',\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      });\n      const finalRes = await callRes.json();\n      const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n\n      if (failedToGetData) {\n        console.error('Failed to get records');\n      }\n\n      const recordsData = finalRes.data.recordsData || [];\n      const tableData = recordsData.map(record => {\n        return {\n          sessionDate: record.sessionDate,\n          duration: record.duration,\n          play: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handlePlayBtnClick.bind(this, record.recordEvents),\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 27\n          }, this)\n        };\n      });\n      this.setState({\n        tableData: tableData || [],\n        recordsData: recordsData || []\n      });\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayBtnClick(steps) {\n    if (this.state.cursor) {\n      cursor = animateActions.hideCursor(this.state.cursor);\n    }\n\n    if (this.state.timeout) {\n      window.clearTimeout(this.state.timeout);\n    }\n\n    this.setState({\n      showPlayer: true,\n      shouldPlayerPause: false\n    }, this.play.bind(this, steps));\n  }\n\n  play(steps) {\n    this.animate(steps);\n  }\n\n  animate(steps) {\n    let nowTime = this.state.nowTime;\n    let preTime = this.state.preTime;\n    let stepNumber = this.state.stepNumber;\n    let stepsCount = this.state.steps && this.state.steps.length;\n    let timeout = this.state.timeout;\n    let currentStep = this.state.currentStep;\n    let cursor = this.state.cursor;\n\n    if (steps) {\n      nowTime = 0;\n      preTime = 0;\n      stepNumber = 0;\n      stepsCount = steps.length;\n      timeout = null;\n      currentStep = null;\n      cursor = null;\n    }\n\n    steps = steps || this.state.steps;\n    cursor = animateActions.showCursor(cursor);\n    currentStep = steps[stepNumber];\n\n    if (currentStep.type === 'move') {\n      cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, currentStep.screenProportions, cursor);\n    }\n\n    if (currentStep.type === 'click') {\n      cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, currentStep.screenProportions, cursor);\n    }\n\n    if (currentStep.type === 'scroll') {\n      window.scrollTo(currentStep.x, currentStep.y);\n    }\n\n    preTime = nowTime;\n    nowTime = currentStep.time;\n    stepNumber++;\n\n    if (stepNumber === stepsCount) {\n      console.log('Finished playing recording');\n      window.clearTimeout(timeout);\n      cursor = animateActions.hideCursor(cursor);\n    } else {\n      timeout = setTimeout(() => {\n        if (!this.state.shouldPlayerPause) {\n          this.setState({\n            stepNumber: stepNumber,\n            steps: steps,\n            cursor: cursor,\n            timeout: timeout,\n            stepsCount: stepsCount,\n            currentStep: currentStep,\n            nowTime: nowTime,\n            preTime: preTime\n          });\n          this.animate();\n        }\n      }, preTime - nowTime);\n    }\n  }\n\n  clearPlayerData() {\n    this.setState({\n      stepNumber: 0,\n      steps: [],\n      cursor: null,\n      timeout: null,\n      stepsCount: 0\n    });\n  }\n\n  render() {\n    const content = this.state.showPlayer ? '' : /*#__PURE__*/_jsxDEV(BasicTable, {\n      tableHeaders: this.state.tableHeaders || [],\n      tableData: this.state.tableData || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 54\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playerCanvas\",\n        style: {\n          margin: '50px auto',\n          width: 700\n        },\n        children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n          showPlayer: this.state.showPlayer || false,\n          handleListClick: () => this.handleListClick()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MusicCard, {\n          data: db.alternative[this.state.current - 1],\n          pause: () => this.pause(),\n          play: () => this.playPlayer(),\n          content: content,\n          showPlayer: this.state.showPlayer || false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateActions","cursor","MenuBar","MusicCard","db","Player","Component","constructor","props","playPlayer","action","setState","shouldPlayerPause","play","pause","handleListClick","showPlayer","state","tableHeaders","tableData","componentDidMount","getRecords","callRes","fetch","method","dataType","contentType","finalRes","json","failedToGetData","data","statusCode","console","error","recordsData","map","record","sessionDate","duration","handlePlayBtnClick","bind","recordEvents","ex","steps","hideCursor","timeout","window","clearTimeout","animate","nowTime","preTime","stepNumber","stepsCount","length","currentStep","showCursor","type","setCursorPosition","x","y","screenProportions","clickOnElementAtPosition","scrollTo","time","log","setTimeout","clearPlayerData","render","content","margin","width","alternative","current"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BasicTable from \"./table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport MusicCard from \"./components/musicCard\";\nimport { db } from \"./components/db.js\";\n\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            showPlayer: false,\n            shouldPlayerPause: false\n        }\n    }\n    componentDidMount() {\n        this.getRecords();\n    }\n\n    async getRecords() {\n        try {\n            const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n                // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n                method: 'get',\n                dataType: 'json',\n                contentType: 'application/json; charset=utf-8'\n            })\n            const finalRes = await callRes.json();\n            const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            if (failedToGetData) {\n                console.error('Failed to get records');\n            }\n            const recordsData = finalRes.data.recordsData || [];\n            const tableData = recordsData.map((record) =>{\n                return {\n                    sessionDate: record.sessionDate,\n                    duration: record.duration,\n                    play: <button onClick={this.handlePlayBtnClick.bind(this, record.recordEvents)}>Play</button>\n                }\n            });\n            this.setState({tableData: tableData || [], recordsData: recordsData || []})\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayBtnClick(steps) {\n        if(this.state.cursor){\n            cursor = animateActions.hideCursor(this.state.cursor);\n        }\n        if(this.state.timeout){\n            window.clearTimeout(this.state.timeout);\n        }\n        this.setState({showPlayer: true, shouldPlayerPause: false}, this.play.bind(this, steps))\n    }\n\n    play(steps) {\n\n        this.animate(steps)\n\n    }\n\n    animate(steps) {\n        let nowTime = this.state.nowTime;\n        let preTime = this.state.preTime;\n        let stepNumber = this.state.stepNumber;\n        let stepsCount = this.state.steps && this.state.steps.length;\n        let timeout = this.state.timeout;\n        let currentStep = this.state.currentStep;\n        let cursor = this.state.cursor;\n\n        if (steps) {\n            nowTime = 0;\n            preTime = 0;\n            stepNumber = 0;\n            stepsCount = steps.length;\n            timeout = null;\n            currentStep = null;\n            cursor = null;\n        }\n        steps = steps || this.state.steps;\n        cursor = animateActions.showCursor(cursor);\n\n        currentStep = steps[stepNumber];\n        if (currentStep.type === 'move') {\n            cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, currentStep.screenProportions, cursor);\n        }\n\n        if (currentStep.type === 'click') {\n            cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, currentStep.screenProportions, cursor);\n        }\n\n        if (currentStep.type === 'scroll') {\n            window.scrollTo(currentStep.x, currentStep.y);\n        }\n\n        preTime = nowTime;\n        nowTime = currentStep.time;\n\n        stepNumber++;\n\n        if (stepNumber === stepsCount) {\n            console.log('Finished playing recording');\n            window.clearTimeout(timeout);\n            cursor = animateActions.hideCursor(cursor);\n        } else {\n\n            timeout = setTimeout(() => {\n                if (!this.state.shouldPlayerPause) {\n                    this.setState({\n                        stepNumber: stepNumber,\n                        steps: steps,\n                        cursor: cursor,\n                        timeout: timeout,\n                        stepsCount: stepsCount,\n                        currentStep: currentStep,\n                        nowTime: nowTime,\n                        preTime: preTime\n                    });\n                    this.animate()\n                }\n            }, preTime - nowTime);\n        }\n    }\n\n\n    clearPlayerData (){\n        this.setState({\n            stepNumber: 0,\n            steps: [],\n            cursor: null,\n            timeout: null,\n            stepsCount: 0\n        });\n    }\n    playPlayer = action => {\n        this.setState({shouldPlayerPause: false});\n\n        this.play();\n\n    };\n    pause = action => {\n        this.setState({shouldPlayerPause: true});\n    };\n    handleListClick = action => {\n        this.setState({shouldPlayerPause: true, showPlayer: false});\n    };\n\n\n    render() {\n        const content = this.state.showPlayer ? '' : <BasicTable\n            tableHeaders={this.state.tableHeaders || []}\n            tableData={this.state.tableData || []}\n        />\n        return (\n            <div >\n                <div id={\"playerCanvas\"} style={{\n                    margin: '50px auto',\n                    width: 700,\n                }}>\n                    <MenuBar showPlayer={this.state.showPlayer || false}\n                    handleListClick={() => this.handleListClick()}/>\n                    <MusicCard\n                        data={db.alternative[this.state.current - 1]}\n                        pause={() => this.pause()}\n                        play={() => this.playPlayer()}\n                        content={content}\n                        showPlayer={this.state.showPlayer || false}/>\n                </div>\n\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}