{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateHelpers from \"../helpers/animate-helpers.js\";\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nlet cursor;\nlet playerWidth = 1000;\nlet playerHeight = 700;\nlet capturedSessionScreenSize = 'Real screen resolution: ' + playerWidth + 'x' + playerHeight;\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resume = action => {\n      if (!this.state.sessionFinishedPlaying) {\n        this.setState({\n          shouldPlayerPause: false\n        });\n        this.play();\n      } else {\n        this.setState({\n          showPlayer: false\n        });\n      }\n    };\n\n    this.pause = action => {\n      this.setState({\n        shouldPlayerPause: true,\n        isPlayingNow: false,\n        sessionFinishedPlaying: false\n      });\n    };\n\n    this.handleGoToListClick = action => {\n      if (this.state.cursor) {\n        cursor = animateHelpers.hideCursor(this.state.cursor);\n      }\n\n      this.resetPlayerWidthAndHeight();\n      this.setState({\n        shouldPlayerPause: true,\n        showPlayer: false,\n        isPlayingNow: false,\n        cursor: cursor\n      });\n    };\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      currentAction: null,\n      sessionFinishedPlaying: true,\n      showPlayer: false,\n      shouldPlayerPause: false,\n      isPlayingNow: false,\n      nowTime: 0,\n      preTime: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getSessions();\n  }\n  /**\n   * getting sessions from db and creating table for the player\n   * @returns {object} {Promise<void>}\n   */\n\n\n  async getSessions() {\n    try {\n      const callRes = await fetch('http://localhost:3000/server/getSessions', {\n        method: 'get',\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      });\n      const finalRes = await callRes.json();\n      const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n\n      if (failedToGetData) {\n        console.error('Failed to get records');\n      } else {\n        const sessionsData = finalRes.data || [];\n        const tableData = sessionsData.map(session => {\n          return {\n            sessionDate: session.sessionDate,\n            duration: session.duration,\n            play: /*#__PURE__*/_jsxDEV(PlayCircleFilledIcon, {\n              style: {\n                cursor: 'pointer'\n              },\n              onClick: this.handlePlayFromListClick.bind(this, session.recordEvents)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 31\n            }, this)\n          };\n        });\n        this.setState({\n          tableData: tableData || [],\n          sessionsData: sessionsData || []\n        });\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayFromListClick(actions) {\n    if (this.state.timeout) {\n      window.clearTimeout(this.state.timeout);\n    }\n\n    this.setState({\n      showPlayer: true,\n      shouldPlayerPause: false\n    }, this.play.bind(this, actions, true));\n  }\n\n  play(actions, isTriggeredFromList = false) {\n    this.setState({\n      isPlayingNow: true,\n      sessionFinishedPlaying: false\n    });\n    this.animateActions(actions, isTriggeredFromList);\n  }\n  /**\n   * animating the mouse events on player\n   * @param {array} actions\n   * @param {boolean} isTriggeredFromList\n   */\n\n\n  animateActions(actions, isTriggeredFromList) {\n    let nowTime = this.state.nowTime;\n    let preTime = this.state.preTime;\n    let actionNumber = this.state.actionNumber;\n    let actionsCount = this.state.actions && this.state.actions.length;\n    let timeout = this.state.timeout;\n    let currentAction = this.state.currentAction;\n    let cursor = this.state.cursor;\n\n    if (actions && isTriggeredFromList) {\n      nowTime = 0;\n      preTime = 0;\n      actionNumber = 0;\n      actionsCount = actions.length;\n      timeout = null;\n      currentAction = null;\n      cursor = null;\n    }\n\n    actions = actions || this.state.actions;\n    cursor = animateHelpers.showCursor(cursor);\n    currentAction = actions[actionNumber]; // resizing player with the screen captured proportion\n\n    if (currentAction.screenProportions) {\n      playerWidth = currentAction.screenProportions.width;\n      playerHeight = currentAction.screenProportions.height;\n      capturedSessionScreenSize = 'Real screen resolution: ' + currentAction.screenProportions.width + 'x' + currentAction.screenProportions.height;\n\n      while (playerWidth > 1440 || playerHeight > 700) {\n        playerWidth = playerWidth * 0.5;\n        playerHeight = playerHeight * 0.5;\n      }\n    } // setting position of mouse\n\n\n    if (currentAction.type === 'move') {\n      cursor = animateHelpers.setCursorPosition(currentAction.x, currentAction.y, currentAction.screenProportions, playerWidth, playerHeight, cursor);\n    } // showing mouse click\n\n\n    if (currentAction.type === 'click') {\n      cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, false);\n      this.updateActionText('Mouse click');\n    } // showing mouse right click\n\n\n    if (currentAction.type === 'rightClick') {\n      cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, true);\n      this.updateActionText('Mouse right click');\n    } // showing mouse scroll\n\n\n    if (currentAction.type === 'scroll') {\n      window.scrollTo(currentAction.x, currentAction.y);\n      let text = 'Mouse scroll ';\n\n      if (currentAction.y > -0) {\n        text += 'up';\n      } else if (currentAction.y < -0) {\n        text += 'down';\n      } else if (currentAction.x < -0) {\n        text += 'left';\n      } else if (currentAction.x < -0) {\n        text += 'right';\n      }\n\n      this.updateActionText(text);\n    } // set for showing the  mouse movement int the right time\n\n\n    preTime = nowTime;\n    nowTime = currentAction.time;\n    actionNumber++; // once the session events are done we clear data\n\n    if (actionNumber === actionsCount) {\n      console.log('Finished playing recording');\n      window.clearTimeout(timeout);\n      cursor = animateHelpers.hideCursor(cursor);\n      this.clearPlayerData();\n    } else {\n      //recursively animating the mouse events in case users didnt press the pause button\n      timeout = setTimeout(() => {\n        if (!this.state.shouldPlayerPause) {\n          this.setState({\n            actionNumber: actionNumber,\n            actions: actions,\n            cursor: cursor,\n            timeout: timeout,\n            actionsCount: actionsCount,\n            currentAction: currentAction,\n            nowTime: nowTime,\n            preTime: preTime\n          });\n          this.animateActions(null, false);\n        }\n      }, nowTime - preTime);\n    }\n  }\n\n  updateActionText(action) {\n    if (action !== this.state.actionText) {\n      this.setState({\n        actionText: action\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            actionText: ''\n          });\n        }, 700);\n      });\n    }\n  }\n\n  clearPlayerData() {\n    this.resetPlayerWidthAndHeight();\n    this.setState({\n      actionNumber: 0,\n      actions: [],\n      cursor: null,\n      timeout: null,\n      actionsCount: 0,\n      isPlayingNow: false,\n      showPlayer: false,\n      sessionFinishedPlaying: true\n    });\n  }\n\n  resetPlayerWidthAndHeight() {\n    playerWidth = 1000;\n    playerHeight = 700;\n  }\n\n  getPlayerContent() {\n    return this.state.showPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playerCanvas\",\n      style: {\n        background: '#cbcbcb',\n        width: playerWidth,\n        height: playerHeight\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'right',\n          position: 'relative',\n          top: 10,\n          right: 13,\n          fontSize: 12\n        },\n        children: capturedSessionScreenSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(BasicTable, {\n      tableHeaders: this.state.tableHeaders || [],\n      tableData: this.state.tableData || [],\n      width: playerWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const playerContent = this.getPlayerContent();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '50px auto',\n        width: playerWidth\n      },\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n        showPlayer: this.state.showPlayer || false,\n        handleListClick: () => this.handleGoToListClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerCard, {\n        pause: () => this.pause(),\n        play: () => this.resume(),\n        showPlayer: this.state.showPlayer || false,\n        isPlayingNow: this.state.isPlayingNow || false,\n        actionText: this.state.actionText || '',\n        playerScreenHeight: playerHeight,\n        playerScreenWidth: playerWidth,\n        content: playerContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateHelpers","MenuBar","PlayerCard","PlayCircleFilledIcon","cursor","playerWidth","playerHeight","capturedSessionScreenSize","Player","Component","constructor","props","resume","action","state","sessionFinishedPlaying","setState","shouldPlayerPause","play","showPlayer","pause","isPlayingNow","handleGoToListClick","hideCursor","resetPlayerWidthAndHeight","tableHeaders","tableData","currentAction","nowTime","preTime","componentDidMount","getSessions","callRes","fetch","method","dataType","contentType","finalRes","json","failedToGetData","data","statusCode","console","error","sessionsData","map","session","sessionDate","duration","handlePlayFromListClick","bind","recordEvents","ex","actions","timeout","window","clearTimeout","isTriggeredFromList","animateActions","actionNumber","actionsCount","length","showCursor","screenProportions","width","height","type","setCursorPosition","x","y","clickOnElementAtPosition","updateActionText","scrollTo","text","time","log","clearPlayerData","setTimeout","actionText","getPlayerContent","background","textAlign","position","top","right","fontSize","render","playerContent","margin"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AAEA,IAAIC,MAAJ;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,YAAY,GAAG,GAAnB;AACA,IAAIC,yBAAyB,GAAG,6BAA6BF,WAA7B,GAA2C,GAA3C,GAAiDC,YAAjF;;AAEA,MAAME,MAAN,SAAqBV,KAAK,CAACW,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA0LnBC,MA1LmB,GA0LVC,MAAM,IAAI;AACf,UAAG,CAAC,KAAKC,KAAL,CAAWC,sBAAf,EAAsC;AAClC,aAAKC,QAAL,CAAc;AAACC,UAAAA,iBAAiB,EAAE;AAApB,SAAd;AACA,aAAKC,IAAL;AACH,OAHD,MAGM;AACF,aAAKF,QAAL,CAAc;AAACG,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH;AACJ,KAjMkB;;AAAA,SAmMnBC,KAnMmB,GAmMXP,MAAM,IAAI;AACd,WAAKG,QAAL,CAAc;AAACC,QAAAA,iBAAiB,EAAE,IAApB;AAA0BI,QAAAA,YAAY,EAAE,KAAxC;AAA+CN,QAAAA,sBAAsB,EAAE;AAAvE,OAAd;AACH,KArMkB;;AAAA,SAuMnBO,mBAvMmB,GAuMGT,MAAM,IAAI;AAC5B,UAAG,KAAKC,KAAL,CAAWV,MAAd,EAAqB;AACjBA,QAAAA,MAAM,GAAGJ,cAAc,CAACuB,UAAf,CAA0B,KAAKT,KAAL,CAAWV,MAArC,CAAT;AACH;;AACD,WAAKoB,yBAAL;AACA,WAAKR,QAAL,CAAc;AAACC,QAAAA,iBAAiB,EAAE,IAApB;AAA0BE,QAAAA,UAAU,EAAE,KAAtC;AAA6CE,QAAAA,YAAY,EAAE,KAA3D;AAAkEjB,QAAAA,MAAM,EAAEA;AAA1E,OAAd;AACH,KA7MkB;;AAEf,SAAKU,KAAL,GAAY;AACRW,MAAAA,YAAY,EAAE,CAAC,cAAD,EAAiB,UAAjB,EAA6B,MAA7B,CADN;AAERC,MAAAA,SAAS,EAAE,IAFH;AAGRC,MAAAA,aAAa,EAAE,IAHP;AAIRZ,MAAAA,sBAAsB,EAAE,IAJhB;AAKRI,MAAAA,UAAU,EAAE,KALJ;AAMRF,MAAAA,iBAAiB,EAAE,KANX;AAORI,MAAAA,YAAY,EAAE,KAPN;AAQRO,MAAAA,OAAO,EAAE,CARD;AASRC,MAAAA,OAAO,EAAE;AATD,KAAZ;AAWH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,WAAL;AACH;AAED;AACJ;AACA;AACA;;;AACI,QAAMA,WAAN,GAAoB;AAChB,QAAI;AACA,YAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA6C;AACpEC,QAAAA,MAAM,EAAE,KAD4D;AAEpEC,QAAAA,QAAQ,EAAE,MAF0D;AAGpEC,QAAAA,WAAW,EAAE;AAHuD,OAA7C,CAA3B;AAKA,YAAMC,QAAQ,GAAG,MAAML,OAAO,CAACM,IAAR,EAAvB;AACA,YAAMC,eAAe,GAAG,EAAEF,QAAQ,IAAIA,QAAQ,CAACG,IAArB,IAA6BH,QAAQ,CAACI,UAAT,KAAwB,GAAvD,CAAxB;;AACA,UAAIF,eAAJ,EAAqB;AACjBG,QAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd;AACH,OAFD,MAEO;AACH,cAAMC,YAAY,GAAGP,QAAQ,CAACG,IAAT,IAAiB,EAAtC;AAEA,cAAMd,SAAS,GAAGkB,YAAY,CAACC,GAAb,CAAkBC,OAAD,IAAa;AAC5C,iBAAO;AACHC,YAAAA,WAAW,EAAED,OAAO,CAACC,WADlB;AAEHC,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QAFf;AAGH9B,YAAAA,IAAI,eAAE,QAAC,oBAAD;AACF,cAAA,KAAK,EAAE;AAACd,gBAAAA,MAAM,EAAE;AAAT,eADL;AAEF,cAAA,OAAO,EAAE,KAAK6C,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,EAAwCJ,OAAO,CAACK,YAAhD;AAFP;AAAA;AAAA;AAAA;AAAA;AAHH,WAAP;AAOH,SARiB,CAAlB;AASA,aAAKnC,QAAL,CAAc;AAACU,UAAAA,SAAS,EAAEA,SAAS,IAAI,EAAzB;AAA6BkB,UAAAA,YAAY,EAAEA,YAAY,IAAI;AAA3D,SAAd;AACH;AACJ,KAxBD,CAwBE,OAAOQ,EAAP,EAAW;AACTV,MAAAA,OAAO,CAACC,KAAR,CAAcS,EAAd;AACH;AACJ;;AAEDH,EAAAA,uBAAuB,CAACI,OAAD,EAAU;AAC7B,QAAI,KAAKvC,KAAL,CAAWwC,OAAf,EAAwB;AACpBC,MAAAA,MAAM,CAACC,YAAP,CAAoB,KAAK1C,KAAL,CAAWwC,OAA/B;AACH;;AACD,SAAKtC,QAAL,CAAc;AAACG,MAAAA,UAAU,EAAE,IAAb;AAAmBF,MAAAA,iBAAiB,EAAE;AAAtC,KAAd,EAA4D,KAAKC,IAAL,CAAUgC,IAAV,CAAe,IAAf,EAAqBG,OAArB,EAA8B,IAA9B,CAA5D;AACH;;AAEDnC,EAAAA,IAAI,CAACmC,OAAD,EAAUI,mBAAmB,GAAG,KAAhC,EAAuC;AACvC,SAAKzC,QAAL,CAAc;AAACK,MAAAA,YAAY,EAAE,IAAf;AAAqBN,MAAAA,sBAAsB,EAAE;AAA7C,KAAd;AACA,SAAK2C,cAAL,CAAoBL,OAApB,EAA6BI,mBAA7B;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACL,OAAD,EAAUI,mBAAV,EAA+B;AACzC,QAAI7B,OAAO,GAAG,KAAKd,KAAL,CAAWc,OAAzB;AACA,QAAIC,OAAO,GAAG,KAAKf,KAAL,CAAWe,OAAzB;AACA,QAAI8B,YAAY,GAAG,KAAK7C,KAAL,CAAW6C,YAA9B;AACA,QAAIC,YAAY,GAAG,KAAK9C,KAAL,CAAWuC,OAAX,IAAsB,KAAKvC,KAAL,CAAWuC,OAAX,CAAmBQ,MAA5D;AACA,QAAIP,OAAO,GAAG,KAAKxC,KAAL,CAAWwC,OAAzB;AACA,QAAI3B,aAAa,GAAG,KAAKb,KAAL,CAAWa,aAA/B;AACA,QAAIvB,MAAM,GAAG,KAAKU,KAAL,CAAWV,MAAxB;;AAEA,QAAIiD,OAAO,IAAII,mBAAf,EAAoC;AAChC7B,MAAAA,OAAO,GAAG,CAAV;AACAC,MAAAA,OAAO,GAAG,CAAV;AACA8B,MAAAA,YAAY,GAAG,CAAf;AACAC,MAAAA,YAAY,GAAGP,OAAO,CAACQ,MAAvB;AACAP,MAAAA,OAAO,GAAG,IAAV;AACA3B,MAAAA,aAAa,GAAG,IAAhB;AACAvB,MAAAA,MAAM,GAAG,IAAT;AACH;;AAEDiD,IAAAA,OAAO,GAAGA,OAAO,IAAI,KAAKvC,KAAL,CAAWuC,OAAhC;AACAjD,IAAAA,MAAM,GAAGJ,cAAc,CAAC8D,UAAf,CAA0B1D,MAA1B,CAAT;AACAuB,IAAAA,aAAa,GAAG0B,OAAO,CAACM,YAAD,CAAvB,CArByC,CAuBzC;;AACA,QAAIhC,aAAa,CAACoC,iBAAlB,EAAqC;AACjC1D,MAAAA,WAAW,GAAGsB,aAAa,CAACoC,iBAAd,CAAgCC,KAA9C;AACA1D,MAAAA,YAAY,GAAGqB,aAAa,CAACoC,iBAAd,CAAgCE,MAA/C;AACA1D,MAAAA,yBAAyB,GAAG,6BAA6BoB,aAAa,CAACoC,iBAAd,CAAgCC,KAA7D,GAAqE,GAArE,GAA2ErC,aAAa,CAACoC,iBAAd,CAAgCE,MAAvI;;AAEA,aAAO5D,WAAW,GAAG,IAAd,IAAsBC,YAAY,GAAG,GAA5C,EAAiD;AAC7CD,QAAAA,WAAW,GAAGA,WAAW,GAAG,GAA5B;AACAC,QAAAA,YAAY,GAAGA,YAAY,GAAG,GAA9B;AACH;AACJ,KAjCwC,CAkCzC;;;AACA,QAAIqB,aAAa,CAACuC,IAAd,KAAuB,MAA3B,EAAmC;AAC/B9D,MAAAA,MAAM,GAAGJ,cAAc,CAACmE,iBAAf,CAAiCxC,aAAa,CAACyC,CAA/C,EAAkDzC,aAAa,CAAC0C,CAAhE,EACL1C,aAAa,CAACoC,iBADT,EAC4B1D,WAD5B,EACyCC,YADzC,EACuDF,MADvD,CAAT;AAEH,KAtCwC,CAwCzC;;;AACA,QAAIuB,aAAa,CAACuC,IAAd,KAAuB,OAA3B,EAAoC;AAChC9D,MAAAA,MAAM,GAAGJ,cAAc,CAACsE,wBAAf,CAAwC3C,aAAa,CAACyC,CAAtD,EAAyDzC,aAAa,CAAC0C,CAAvE,EAA0E1C,aAAa,CAACoC,iBAAxF,EAA2G3D,MAA3G,EAAmH,KAAnH,CAAT;AACA,WAAKmE,gBAAL,CAAsB,aAAtB;AACH,KA5CwC,CA6CzC;;;AACA,QAAI5C,aAAa,CAACuC,IAAd,KAAuB,YAA3B,EAAyC;AACrC9D,MAAAA,MAAM,GAAGJ,cAAc,CAACsE,wBAAf,CAAwC3C,aAAa,CAACyC,CAAtD,EAAyDzC,aAAa,CAAC0C,CAAvE,EAA0E1C,aAAa,CAACoC,iBAAxF,EAA2G3D,MAA3G,EAAmH,IAAnH,CAAT;AACA,WAAKmE,gBAAL,CAAsB,mBAAtB;AACH,KAjDwC,CAmDzC;;;AACA,QAAI5C,aAAa,CAACuC,IAAd,KAAuB,QAA3B,EAAqC;AACjCX,MAAAA,MAAM,CAACiB,QAAP,CAAgB7C,aAAa,CAACyC,CAA9B,EAAiCzC,aAAa,CAAC0C,CAA/C;AACA,UAAII,IAAI,GAAG,eAAX;;AACA,UAAI9C,aAAa,CAAC0C,CAAd,GAAkB,CAAC,CAAvB,EAA0B;AACtBI,QAAAA,IAAI,IAAI,IAAR;AACH,OAFD,MAEO,IAAI9C,aAAa,CAAC0C,CAAd,GAAkB,CAAC,CAAvB,EAA0B;AAC7BI,QAAAA,IAAI,IAAI,MAAR;AACH,OAFM,MAEA,IAAI9C,aAAa,CAACyC,CAAd,GAAkB,CAAC,CAAvB,EAA0B;AAC7BK,QAAAA,IAAI,IAAI,MAAR;AACH,OAFM,MAEA,IAAI9C,aAAa,CAACyC,CAAd,GAAkB,CAAC,CAAvB,EAA0B;AAC7BK,QAAAA,IAAI,IAAI,OAAR;AACH;;AACD,WAAKF,gBAAL,CAAsBE,IAAtB;AACH,KAjEwC,CAmEzC;;;AACA5C,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,aAAa,CAAC+C,IAAxB;AACAf,IAAAA,YAAY,GAtE6B,CAwEzC;;AACA,QAAIA,YAAY,KAAKC,YAArB,EAAmC;AAC/BlB,MAAAA,OAAO,CAACiC,GAAR,CAAY,4BAAZ;AACApB,MAAAA,MAAM,CAACC,YAAP,CAAoBF,OAApB;AACAlD,MAAAA,MAAM,GAAGJ,cAAc,CAACuB,UAAf,CAA0BnB,MAA1B,CAAT;AACA,WAAKwE,eAAL;AACH,KALD,MAKO;AAEH;AACAtB,MAAAA,OAAO,GAAGuB,UAAU,CAAC,MAAM;AACvB,YAAI,CAAC,KAAK/D,KAAL,CAAWG,iBAAhB,EAAmC;AAC/B,eAAKD,QAAL,CAAc;AAAC2C,YAAAA,YAAY,EAAEA,YAAf;AAA6BN,YAAAA,OAAO,EAAEA,OAAtC;AAA+CjD,YAAAA,MAAM,EAAEA,MAAvD;AAA+DkD,YAAAA,OAAO,EAAEA,OAAxE;AACVM,YAAAA,YAAY,EAAEA,YADJ;AACkBjC,YAAAA,aAAa,EAAEA,aADjC;AACgDC,YAAAA,OAAO,EAAEA,OADzD;AACkEC,YAAAA,OAAO,EAAEA;AAD3E,WAAd;AAGA,eAAK6B,cAAL,CAAoB,IAApB,EAAyB,KAAzB;AACH;AACJ,OAPmB,EAOjB9B,OAAO,GAAGC,OAPO,CAApB;AAQH;AACJ;;AAED0C,EAAAA,gBAAgB,CAAC1D,MAAD,EAAS;AACrB,QAAGA,MAAM,KAAK,KAAKC,KAAL,CAAWgE,UAAzB,EAAoC;AAChC,WAAK9D,QAAL,CAAc;AAAC8D,QAAAA,UAAU,EAAEjE;AAAb,OAAd,EAAoC,MAAM;AACtCgE,QAAAA,UAAU,CAAC,MAAM;AACb,eAAK7D,QAAL,CAAc;AAAC8D,YAAAA,UAAU,EAAE;AAAb,WAAd;AACH,SAFS,EAEP,GAFO,CAAV;AAGH,OAJD;AAKH;AACJ;;AAEDF,EAAAA,eAAe,GAAG;AACd,SAAKpD,yBAAL;AACA,SAAKR,QAAL,CAAc;AACV2C,MAAAA,YAAY,EAAE,CADJ;AACON,MAAAA,OAAO,EAAE,EADhB;AACoBjD,MAAAA,MAAM,EAAE,IAD5B;AAEVkD,MAAAA,OAAO,EAAE,IAFC;AAEKM,MAAAA,YAAY,EAAE,CAFnB;AAEsBvC,MAAAA,YAAY,EAAE,KAFpC;AAE2CF,MAAAA,UAAU,EAAE,KAFvD;AAGVJ,MAAAA,sBAAsB,EAAE;AAHd,KAAd;AAKH;;AAEDS,EAAAA,yBAAyB,GAAG;AACxBnB,IAAAA,WAAW,GAAG,IAAd;AACAC,IAAAA,YAAY,GAAG,GAAf;AACH;;AAuBDyE,EAAAA,gBAAgB,GAAG;AACf,WAAQ,KAAKjE,KAAL,CAAWK,UAAX,gBACJ;AAAK,MAAA,EAAE,EAAE,cAAT;AAAyB,MAAA,KAAK,EAAE;AAAC6D,QAAAA,UAAU,EAAE,SAAb;AAAwBhB,QAAAA,KAAK,EAAE3D,WAA/B;AAA4C4D,QAAAA,MAAM,EAAE3D;AAApD,OAAhC;AAAA,6BACI;AAAK,QAAA,KAAK,EAAE;AAAC2E,UAAAA,SAAS,EAAE,OAAZ;AAAqBC,UAAAA,QAAQ,EAAE,UAA/B;AAA2CC,UAAAA,GAAG,EAAE,EAAhD;AAAoDC,UAAAA,KAAK,EAAE,EAA3D;AAA+DC,UAAAA,QAAQ,EAAE;AAAzE,SAAZ;AAAA,kBAA2F9E;AAA3F;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADI,gBAIJ,QAAC,UAAD;AACI,MAAA,YAAY,EAAE,KAAKO,KAAL,CAAWW,YAAX,IAA2B,EAD7C;AAEI,MAAA,SAAS,EAAE,KAAKX,KAAL,CAAWY,SAAX,IAAwB,EAFvC;AAGI,MAAA,KAAK,EAAErB;AAHX;AAAA;AAAA;AAAA;AAAA,YAJJ;AASH;;AAEDiF,EAAAA,MAAM,GAAG;AACL,UAAMC,aAAa,GAAG,KAAKR,gBAAL,EAAtB;AAEA,wBACI;AAAK,MAAA,KAAK,EAAE;AAACS,QAAAA,MAAM,EAAE,WAAT;AAAsBxB,QAAAA,KAAK,EAAE3D;AAA7B,OAAZ;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,UAAU,EAAE,KAAKS,KAAL,CAAWK,UAAX,IAAyB,KAA9C;AACS,QAAA,eAAe,EAAE,MAAM,KAAKG,mBAAL;AADhC;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI,QAAC,UAAD;AACI,QAAA,KAAK,EAAE,MAAM,KAAKF,KAAL,EADjB;AAEI,QAAA,IAAI,EAAE,MAAM,KAAKR,MAAL,EAFhB;AAGI,QAAA,UAAU,EAAE,KAAKE,KAAL,CAAWK,UAAX,IAAyB,KAHzC;AAII,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWO,YAAX,IAA2B,KAJ7C;AAKI,QAAA,UAAU,EAAE,KAAKP,KAAL,CAAWgE,UAAX,IAAyB,EALzC;AAMI,QAAA,kBAAkB,EAAExE,YANxB;AAOI,QAAA,iBAAiB,EAAED,WAPvB;AAQI,QAAA,OAAO,EAAEkF;AARb;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH;;AA/OgC;;AAiPrC,eAAe/E,MAAf","sourcesContent":["import React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateHelpers from \"../helpers/animate-helpers.js\";\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\n\nlet cursor;\nlet playerWidth = 1000;\nlet playerHeight = 700;\nlet capturedSessionScreenSize = 'Real screen resolution: ' + playerWidth + 'x' + playerHeight;\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            currentAction: null,\n            sessionFinishedPlaying: true,\n            showPlayer: false,\n            shouldPlayerPause: false,\n            isPlayingNow: false,\n            nowTime: 0,\n            preTime: 0\n        }\n    }\n\n    componentDidMount() {\n        this.getSessions();\n    }\n\n    /**\n     * getting sessions from db and creating table for the player\n     * @returns {object} {Promise<void>}\n     */\n    async getSessions() {\n        try {\n            const callRes = await fetch('http://localhost:3000/server/getSessions', {\n                method: 'get',\n                dataType: 'json',\n                contentType: 'application/json; charset=utf-8'\n            })\n            const finalRes = await callRes.json();\n            const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            if (failedToGetData) {\n                console.error('Failed to get records');\n            } else {\n                const sessionsData = finalRes.data || [];\n\n                const tableData = sessionsData.map((session) => {\n                    return {\n                        sessionDate: session.sessionDate,\n                        duration: session.duration,\n                        play: <PlayCircleFilledIcon\n                            style={{cursor: 'pointer'}}\n                            onClick={this.handlePlayFromListClick.bind(this, session.recordEvents)}/>\n                    }\n                });\n                this.setState({tableData: tableData || [], sessionsData: sessionsData || []})\n            }\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayFromListClick(actions) {\n        if (this.state.timeout) {\n            window.clearTimeout(this.state.timeout);\n        }\n        this.setState({showPlayer: true, shouldPlayerPause: false}, this.play.bind(this, actions, true))\n    }\n\n    play(actions, isTriggeredFromList = false) {\n        this.setState({isPlayingNow: true, sessionFinishedPlaying: false});\n        this.animateActions(actions, isTriggeredFromList)\n    }\n\n    /**\n     * animating the mouse events on player\n     * @param {array} actions\n     * @param {boolean} isTriggeredFromList\n     */\n    animateActions(actions, isTriggeredFromList) {\n        let nowTime = this.state.nowTime;\n        let preTime = this.state.preTime;\n        let actionNumber = this.state.actionNumber;\n        let actionsCount = this.state.actions && this.state.actions.length;\n        let timeout = this.state.timeout;\n        let currentAction = this.state.currentAction;\n        let cursor = this.state.cursor;\n\n        if (actions && isTriggeredFromList) {\n            nowTime = 0;\n            preTime = 0;\n            actionNumber = 0;\n            actionsCount = actions.length;\n            timeout = null;\n            currentAction = null;\n            cursor = null;\n        }\n\n        actions = actions || this.state.actions;\n        cursor = animateHelpers.showCursor(cursor);\n        currentAction = actions[actionNumber];\n\n        // resizing player with the screen captured proportion\n        if (currentAction.screenProportions) {\n            playerWidth = currentAction.screenProportions.width;\n            playerHeight = currentAction.screenProportions.height;\n            capturedSessionScreenSize = 'Real screen resolution: ' + currentAction.screenProportions.width + 'x' + currentAction.screenProportions.height;\n\n            while (playerWidth > 1440 || playerHeight > 700) {\n                playerWidth = playerWidth * 0.5;\n                playerHeight = playerHeight * 0.5;\n            }\n        }\n        // setting position of mouse\n        if (currentAction.type === 'move') {\n            cursor = animateHelpers.setCursorPosition(currentAction.x, currentAction.y,\n                currentAction.screenProportions, playerWidth, playerHeight, cursor);\n        }\n\n        // showing mouse click\n        if (currentAction.type === 'click') {\n            cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, false);\n            this.updateActionText('Mouse click');\n        }\n        // showing mouse right click\n        if (currentAction.type === 'rightClick') {\n            cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, true);\n            this.updateActionText('Mouse right click');\n        }\n\n        // showing mouse scroll\n        if (currentAction.type === 'scroll') {\n            window.scrollTo(currentAction.x, currentAction.y);\n            let text = 'Mouse scroll ';\n            if (currentAction.y > -0) {\n                text += 'up';\n            } else if (currentAction.y < -0) {\n                text += 'down';\n            } else if (currentAction.x < -0) {\n                text += 'left';\n            } else if (currentAction.x < -0) {\n                text += 'right';\n            }\n            this.updateActionText(text);\n        }\n\n        // set for showing the  mouse movement int the right time\n        preTime = nowTime;\n        nowTime = currentAction.time;\n        actionNumber++;\n\n        // once the session events are done we clear data\n        if (actionNumber === actionsCount) {\n            console.log('Finished playing recording');\n            window.clearTimeout(timeout);\n            cursor = animateHelpers.hideCursor(cursor);\n            this.clearPlayerData();\n        } else {\n\n            //recursively animating the mouse events in case users didnt press the pause button\n            timeout = setTimeout(() => {\n                if (!this.state.shouldPlayerPause) {\n                    this.setState({actionNumber: actionNumber, actions: actions, cursor: cursor, timeout: timeout,\n                        actionsCount: actionsCount, currentAction: currentAction, nowTime: nowTime, preTime: preTime\n                    });\n                    this.animateActions(null,false);\n                }\n            }, nowTime - preTime);\n        }\n    }\n\n    updateActionText(action) {\n        if(action !== this.state.actionText){\n            this.setState({actionText: action}, () => {\n                setTimeout(() => {\n                    this.setState({actionText: ''})\n                }, 700);\n            })\n        }\n    }\n\n    clearPlayerData() {\n        this.resetPlayerWidthAndHeight()\n        this.setState({\n            actionNumber: 0, actions: [], cursor: null,\n            timeout: null, actionsCount: 0, isPlayingNow: false, showPlayer: false,\n            sessionFinishedPlaying: true\n        });\n    }\n\n    resetPlayerWidthAndHeight() {\n        playerWidth = 1000\n        playerHeight = 700;\n    }\n\n    resume = action => {\n        if(!this.state.sessionFinishedPlaying){\n            this.setState({shouldPlayerPause: false});\n            this.play();\n        } else{\n            this.setState({showPlayer: false});\n        }\n    };\n\n    pause = action => {\n        this.setState({shouldPlayerPause: true, isPlayingNow: false, sessionFinishedPlaying: false});\n    };\n\n    handleGoToListClick = action => {\n        if(this.state.cursor){\n            cursor = animateHelpers.hideCursor(this.state.cursor);\n        }\n        this.resetPlayerWidthAndHeight()\n        this.setState({shouldPlayerPause: true, showPlayer: false, isPlayingNow: false, cursor: cursor});\n    };\n\n    getPlayerContent() {\n        return (this.state.showPlayer ?\n            <div id={\"playerCanvas\"} style={{background: '#cbcbcb', width: playerWidth, height: playerHeight}}>\n                <div style={{textAlign: 'right', position: 'relative', top: 10, right: 13, fontSize: 12}}>{capturedSessionScreenSize}</div>\n            </div> :\n            <BasicTable\n                tableHeaders={this.state.tableHeaders || []}\n                tableData={this.state.tableData || []}\n                width={playerWidth}\n            />);\n    }\n\n    render() {\n        const playerContent = this.getPlayerContent();\n\n        return (\n            <div style={{margin: '50px auto', width: playerWidth}}>\n                <MenuBar showPlayer={this.state.showPlayer || false}\n                         handleListClick={() => this.handleGoToListClick()}/>\n                <PlayerCard\n                    pause={() => this.pause()}\n                    play={() => this.resume()}\n                    showPlayer={this.state.showPlayer || false}\n                    isPlayingNow={this.state.isPlayingNow || false}\n                    actionText={this.state.actionText || ''}\n                    playerScreenHeight={playerHeight}\n                    playerScreenWidth={playerWidth}\n                    content={playerContent}\n                />\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}