{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport MusicCard from \"./components/musicCard\";\nimport { db } from \"./components/db.js\";\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.next = action => {};\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      showPlayer: false\n    };\n  }\n\n  componentDidMount() {\n    this.getRecords();\n  }\n\n  async getRecords() {\n    try {\n      const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n        // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n        method: 'get',\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      });\n      const finalRes = await callRes.json();\n      const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n\n      if (failedToGetData) {\n        console.error('Failed to get records');\n      }\n\n      const recordsData = finalRes.data.recordsData || [];\n      const tableData = recordsData.map(record => {\n        return {\n          sessionDate: record.sessionDate,\n          duration: record.duration,\n          play: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handlePlayBtnClick.bind(this, record.recordEvents),\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 27\n          }, this)\n        };\n      });\n      this.setState({\n        tableData: tableData || [],\n        recordsData: recordsData || []\n      });\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayBtnClick(steps) {\n    this.setState({\n      showPlayer: true\n    }, this.play.bind(this, steps));\n  }\n\n  play(steps) {\n    let preTime = 0;\n    let nowTime = 0;\n    console.log('Playing recording with', steps.length, 'steps');\n    cursor = animateActions.showCursor(cursor);\n    let stepNumber = 0;\n    let stepsCount = steps.length;\n    let timeout, currentStep;\n\n    (function animate() {\n      currentStep = steps[stepNumber];\n\n      if (currentStep.type === 'move') {\n        cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, cursor);\n      }\n\n      if (currentStep.type === 'click') {\n        cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, cursor);\n      }\n\n      if (currentStep.type === 'scroll') {\n        window.scrollTo(currentStep.x, currentStep.y);\n      }\n\n      preTime = nowTime;\n      nowTime = currentStep.time;\n      stepNumber++;\n\n      if (stepNumber === stepsCount) {\n        console.log('Finished playing recording');\n        window.clearTimeout(timeout);\n        cursor = animateActions.hideCursor(cursor);\n      } else {\n        timeout = setTimeout(() => {\n          animate();\n        }, preTime - nowTime);\n      }\n    })();\n  }\n\n  render() {\n    const content = this.state.showPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 49\n    }, this) : /*#__PURE__*/_jsxDEV(BasicTable, {\n      tableHeaders: this.state.tableHeaders || [],\n      tableData: this.state.tableData || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 68\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playerCanvas\",\n        style: {\n          margin: '50px auto',\n          width: 700\n        },\n        children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MusicCard, {\n          data: db.alternative[this.state.current - 1],\n          next: () => this.next(),\n          play: () => this.play,\n          content: content,\n          showPlayer: this.state.showPlayer || false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateActions","cursor","MenuBar","MusicCard","db","Player","Component","constructor","props","next","action","state","tableHeaders","tableData","showPlayer","componentDidMount","getRecords","callRes","fetch","method","dataType","contentType","finalRes","json","failedToGetData","data","statusCode","console","error","recordsData","map","record","sessionDate","duration","play","handlePlayBtnClick","bind","recordEvents","setState","ex","steps","preTime","nowTime","log","length","showCursor","stepNumber","stepsCount","timeout","currentStep","animate","type","setCursorPosition","x","y","clickOnElementAtPosition","window","scrollTo","time","clearTimeout","hideCursor","setTimeout","render","content","margin","width","alternative","current"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BasicTable from \"./table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport MusicCard from \"./components/musicCard\";\nimport { db } from \"./components/db.js\";\n\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            showPlayer: false\n        }\n    }\n    componentDidMount() {\n        this.getRecords();\n    }\n\n    async getRecords() {\n        try {\n            const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n                // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n                method: 'get',\n                dataType: 'json',\n                contentType: 'application/json; charset=utf-8'\n            })\n            const finalRes = await callRes.json();\n            const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            if (failedToGetData) {\n                console.error('Failed to get records');\n            }\n            const recordsData = finalRes.data.recordsData || [];\n            const tableData = recordsData.map((record) =>{\n                return {\n                    sessionDate: record.sessionDate,\n                    duration: record.duration,\n                    play: <button onClick={this.handlePlayBtnClick.bind(this, record.recordEvents)}>Play</button>\n                }\n            });\n            this.setState({tableData: tableData || [], recordsData: recordsData || []})\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayBtnClick(steps) {\n        this.setState({showPlayer: true}, this.play.bind(this, steps))\n    }\n\n    play(steps) {\n        let preTime = 0;\n        let nowTime = 0;\n        console.log('Playing recording with', steps.length, 'steps');\n\n        cursor = animateActions.showCursor(cursor);\n\n        let stepNumber = 0;\n        let stepsCount = steps.length;\n        let timeout, currentStep;\n\n        (function animate() {\n            currentStep = steps[stepNumber];\n            if (currentStep.type === 'move') {\n                cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, cursor);\n            }\n\n            if (currentStep.type === 'click') {\n                cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, cursor);\n            }\n\n            if (currentStep.type === 'scroll') {\n                window.scrollTo(currentStep.x, currentStep.y);\n            }\n\n            preTime = nowTime;\n            nowTime = currentStep.time;\n\n            stepNumber++;\n\n            if (stepNumber === stepsCount) {\n                console.log('Finished playing recording');\n                window.clearTimeout(timeout);\n                cursor = animateActions.hideCursor(cursor);\n            } else {\n                timeout = setTimeout(() => {animate()}, preTime - nowTime);\n            }\n        }());\n    }\n\n    next = action => {\n    };\n\n\n    render() {\n        const content = this.state.showPlayer ? <div>hello</div> : <BasicTable\n            tableHeaders={this.state.tableHeaders || []}\n            tableData={this.state.tableData || []}\n        />\n        return (\n            <div >\n                <div id={\"playerCanvas\"} style={{margin: '50px auto', width: 700, }}>\n                    <MenuBar/>\n                    <MusicCard\n                        data={db.alternative[this.state.current - 1]}\n                        next={() => this.next()}\n                        play={() => this.play}\n                        content={content}\n                        showPlayer={this.state.showPlayer || false}\n                    />\n                </div>\n\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}