{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nconst defaultWidth = 700;\nconst defaultHeight = 400;\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resume = action => {\n      if (!this.state.recordFinishedPlaying) {\n        this.setState({\n          shouldPlayerPause: false\n        });\n        this.play();\n      } else {\n        this.setState({\n          showPlayer: false\n        });\n      }\n    };\n\n    this.pause = action => {\n      this.setState({\n        shouldPlayerPause: true,\n        isPlayingNow: false,\n        recordFinishedPlaying: false\n      });\n    };\n\n    this.handleGoToListClick = action => {\n      if (this.state.cursor) {\n        cursor = animateActions.hideCursor(this.state.cursor);\n      }\n\n      this.setState({\n        shouldPlayerPause: true,\n        showPlayer: false,\n        isPlayingNow: false,\n        cursor: cursor\n      });\n    };\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      showPlayer: false,\n      shouldPlayerPause: false,\n      isPlayingNow: false,\n      recordFinishedPlaying: true,\n      playerScreenWidth: defaultWidth,\n      playerScreenHeight: defaultHeight\n    };\n  }\n\n  componentDidMount() {\n    this.getRecords();\n  }\n\n  async getRecords() {\n    try {\n      const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n        // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n        method: 'get',\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      });\n      const finalRes = await callRes.json();\n      const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n\n      if (failedToGetData) {\n        console.error('Failed to get records');\n      }\n\n      const recordsData = finalRes.data.recordsData || [];\n      const tableData = recordsData.map(record => {\n        return {\n          sessionDate: record.sessionDate,\n          duration: record.duration,\n          play: /*#__PURE__*/_jsxDEV(PlayCircleFilledIcon, {\n            style: {\n              cursor: 'pointer'\n            },\n            onClick: this.handlePlayFromListClick.bind(this, record.recordEvents)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 27\n          }, this)\n        };\n      });\n      this.setState({\n        tableData: tableData || [],\n        recordsData: recordsData || []\n      });\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayFromListClick(steps) {\n    if (this.state.timeout) {\n      window.clearTimeout(this.state.timeout);\n    }\n\n    this.setState({\n      showPlayer: true,\n      shouldPlayerPause: false\n    }, this.play.bind(this, steps));\n  }\n\n  play(steps) {\n    this.setState({\n      isPlayingNow: true,\n      recordFinishedPlaying: false\n    });\n    this.animate(steps);\n  }\n\n  animate(steps) {\n    let nowTime = this.state.nowTime;\n    let preTime = this.state.preTime;\n    let stepNumber = this.state.stepNumber;\n    let stepsCount = this.state.steps && this.state.steps.length;\n    let timeout = this.state.timeout;\n    let currentStep = this.state.currentStep;\n    let cursor = this.state.cursor;\n    let playerScreenWidth = this.state.playerScreenWidth || defaultWidth;\n    let playerScreenHeight = this.state.playerScreenHeight || defaultHeight;\n\n    if (steps) {\n      nowTime = 0;\n      preTime = 0;\n      stepNumber = 0;\n      stepsCount = steps.length;\n      timeout = null;\n      currentStep = null;\n      cursor = null;\n    }\n\n    steps = steps || this.state.steps;\n    cursor = animateActions.showCursor(cursor);\n    currentStep = steps[stepNumber];\n\n    if (currentStep.screenProportions) {\n      playerScreenWidth = currentStep.screenProportions.width;\n      playerScreenHeight = currentStep.screenProportions.height;\n      this.setState({\n        playerScreenWidth: playerScreenWidth,\n        playerScreenHeight: playerScreenHeight\n      });\n\n      if (playerScreenWidth !== this.state.playerScreenWidth || playerScreenHeight !== this.state.playerScreenHeight) {\n        this.updateActionText('Screen Proportion changed to: ' + playerScreenWidth + 'x' + playerScreenHeight);\n      }\n    }\n\n    if (currentStep.type === 'move') {\n      cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, currentStep.screenProportions, playerScreenWidth, playerScreenHeight, cursor);\n    }\n\n    if (currentStep.type === 'click') {\n      cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, currentStep.screenProportions, cursor);\n      this.updateActionText('Mouse click');\n    }\n\n    if (currentStep.type === 'scroll') {\n      window.scrollTo(currentStep.x, currentStep.y);\n      let text = 'Mouse scroll ';\n\n      if (currentStep.y > -0) {\n        text += 'up';\n      } else if (currentStep.y < -0) {\n        text += 'down';\n      } else if (currentStep.x < -0) {\n        text += 'left';\n      } else if (currentStep.x < -0) {\n        text += 'right';\n      }\n\n      this.updateActionText(text);\n    }\n\n    preTime = nowTime;\n    nowTime = currentStep.time;\n    stepNumber++;\n\n    if (stepNumber === stepsCount) {\n      console.log('Finished playing recording');\n      window.clearTimeout(timeout);\n      cursor = animateActions.hideCursor(cursor);\n      this.clearPlayerData();\n    } else {\n      timeout = setTimeout(() => {\n        if (!this.state.shouldPlayerPause) {\n          this.setState({\n            stepNumber: stepNumber,\n            steps: steps,\n            cursor: cursor,\n            timeout: timeout,\n            stepsCount: stepsCount,\n            currentStep: currentStep,\n            nowTime: nowTime,\n            preTime: preTime\n          });\n          this.animate();\n        }\n      }, preTime - nowTime + 40);\n    }\n  }\n\n  updateActionText(action) {\n    if (action !== this.state.actionText) {\n      this.setState({\n        actionText: action\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            actionText: ''\n          });\n        }, 700);\n      });\n    }\n  }\n\n  clearPlayerData() {\n    this.setState({\n      stepNumber: 0,\n      steps: [],\n      cursor: null,\n      timeout: null,\n      stepsCount: 0,\n      isPlayingNow: false,\n      showPlayer: false,\n      recordFinishedPlaying: true,\n      playerScreenWidth: defaultWidth,\n      playerScreenHeight: defaultHeight\n    });\n  }\n\n  render() {\n    const playerScreenWidth = this.state.playerScreenWidth || defaultWidth;\n    const playerScreenHeight = this.state.playerScreenHeight || defaultHeight;\n    const content = this.state.showPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playerCanvas\",\n      style: {\n        background: 'grey',\n        width: this.state.playerScreenWidth || defaultWidth,\n        height: this.state.playerScreenHeight || defaultHeight\n      },\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(BasicTable, {\n      tableHeaders: this.state.tableHeaders || [],\n      tableData: this.state.tableData || [],\n      width: this.state.playerScreenWidth || defaultWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '50px auto',\n        width: playerScreenWidth\n      },\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n        showPlayer: this.state.showPlayer || false,\n        handleListClick: () => this.handleGoToListClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerCard, {\n        pause: () => this.pause(),\n        play: () => this.resume(),\n        showPlayer: this.state.showPlayer || false,\n        isPlayingNow: this.state.isPlayingNow || false,\n        actionText: this.state.actionText || '',\n        playerScreenHeight: playerScreenHeight,\n        playerScreenWidth: playerScreenWidth,\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateActions","cursor","MenuBar","PlayerCard","PlayCircleFilledIcon","defaultWidth","defaultHeight","Player","Component","constructor","props","resume","action","state","recordFinishedPlaying","setState","shouldPlayerPause","play","showPlayer","pause","isPlayingNow","handleGoToListClick","hideCursor","tableHeaders","tableData","playerScreenWidth","playerScreenHeight","componentDidMount","getRecords","callRes","fetch","method","dataType","contentType","finalRes","json","failedToGetData","data","statusCode","console","error","recordsData","map","record","sessionDate","duration","handlePlayFromListClick","bind","recordEvents","ex","steps","timeout","window","clearTimeout","animate","nowTime","preTime","stepNumber","stepsCount","length","currentStep","showCursor","screenProportions","width","height","updateActionText","type","setCursorPosition","x","y","clickOnElementAtPosition","scrollTo","text","time","log","clearPlayerData","setTimeout","actionText","render","content","background","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nconst defaultWidth = 700;\nconst defaultHeight = 400;\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            showPlayer: false,\n            shouldPlayerPause: false,\n            isPlayingNow: false,\n            recordFinishedPlaying: true,\n            playerScreenWidth: defaultWidth,\n            playerScreenHeight: defaultHeight\n        }\n    }\n    componentDidMount() {\n        this.getRecords();\n    }\n\n    async getRecords() {\n        try {\n            const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n                // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n                method: 'get',\n                dataType: 'json',\n                contentType: 'application/json; charset=utf-8'\n            })\n            const finalRes = await callRes.json();\n            const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            if (failedToGetData) {\n                console.error('Failed to get records');\n            }\n            const recordsData = finalRes.data.recordsData || [];\n            const tableData = recordsData.map((record) =>{\n                return {\n                    sessionDate: record.sessionDate,\n                    duration: record.duration,\n                    play: <PlayCircleFilledIcon\n                        style={{cursor: 'pointer'}}\n                        onClick={this.handlePlayFromListClick.bind(this, record.recordEvents)}/>\n                }\n            });\n            this.setState({tableData: tableData || [], recordsData: recordsData || []})\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayFromListClick(steps) {\n        if (this.state.timeout) {\n            window.clearTimeout(this.state.timeout);\n        }\n        this.setState({showPlayer: true, shouldPlayerPause: false}, this.play.bind(this, steps))\n    }\n\n    play(steps) {\n        this.setState({isPlayingNow: true, recordFinishedPlaying: false});\n        this.animate(steps)\n    }\n\n    animate(steps) {\n        let nowTime = this.state.nowTime;\n        let preTime = this.state.preTime;\n        let stepNumber = this.state.stepNumber;\n        let stepsCount = this.state.steps && this.state.steps.length;\n        let timeout = this.state.timeout;\n        let currentStep = this.state.currentStep;\n        let cursor = this.state.cursor;\n        let playerScreenWidth = this.state.playerScreenWidth || defaultWidth;\n        let playerScreenHeight = this.state.playerScreenHeight || defaultHeight;\n\n        if (steps) {\n            nowTime = 0;\n            preTime = 0;\n            stepNumber = 0;\n            stepsCount = steps.length;\n            timeout = null;\n            currentStep = null;\n            cursor = null;\n        }\n        steps = steps || this.state.steps;\n        cursor = animateActions.showCursor(cursor);\n        currentStep = steps[stepNumber];\n\n        if (currentStep.screenProportions) {\n            playerScreenWidth = currentStep.screenProportions.width;\n            playerScreenHeight = currentStep.screenProportions.height;\n            this.setState({playerScreenWidth: playerScreenWidth, playerScreenHeight: playerScreenHeight})\n\n            if ((playerScreenWidth !== this.state.playerScreenWidth) || (playerScreenHeight !== this.state.playerScreenHeight)) {\n                this.updateActionText('Screen Proportion changed to: ' + playerScreenWidth + 'x' + playerScreenHeight);\n            }\n        }\n\n        if (currentStep.type === 'move') {\n            cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y,\n                currentStep.screenProportions, playerScreenWidth, playerScreenHeight, cursor);\n        }\n\n        if (currentStep.type === 'click') {\n            cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, currentStep.screenProportions, cursor);\n            this.updateActionText('Mouse click');\n        }\n\n        if (currentStep.type === 'scroll') {\n            window.scrollTo(currentStep.x, currentStep.y);\n            let text = 'Mouse scroll ';\n            if (currentStep.y > -0) {\n                text += 'up';\n            } else if (currentStep.y < -0) {\n                text += 'down';\n            } else if (currentStep.x < -0) {\n                text += 'left';\n            } else if (currentStep.x < -0) {\n                text += 'right';\n            }\n            this.updateActionText(text);\n        }\n\n        preTime = nowTime;\n        nowTime = currentStep.time;\n\n        stepNumber++;\n\n        if (stepNumber === stepsCount) {\n            console.log('Finished playing recording');\n            window.clearTimeout(timeout);\n            cursor = animateActions.hideCursor(cursor);\n            this.clearPlayerData();\n        } else {\n\n            timeout = setTimeout(() => {\n                if (!this.state.shouldPlayerPause) {\n                    this.setState({\n                        stepNumber: stepNumber,\n                        steps: steps,\n                        cursor: cursor,\n                        timeout: timeout,\n                        stepsCount: stepsCount,\n                        currentStep: currentStep,\n                        nowTime: nowTime,\n                        preTime: preTime\n                    });\n                    this.animate()\n                }\n            }, preTime - nowTime + 40);\n        }\n    }\n\n    updateActionText(action) {\n        if(action !== this.state.actionText){\n            this.setState({actionText: action}, () => {\n                setTimeout(() => {\n                    this.setState({actionText: ''})\n                }, 700);\n            })\n        }\n    }\n\n    clearPlayerData() {\n        this.setState({\n            stepNumber: 0, steps: [], cursor: null,\n            timeout: null, stepsCount: 0, isPlayingNow: false, showPlayer: false,\n            recordFinishedPlaying: true, playerScreenWidth: defaultWidth, playerScreenHeight: defaultHeight\n        });\n    }\n\n    resume = action => {\n        if(!this.state.recordFinishedPlaying){\n            this.setState({shouldPlayerPause: false});\n            this.play();\n        } else{\n            this.setState({showPlayer: false});\n        }\n    };\n\n    pause = action => {\n        this.setState({shouldPlayerPause: true, isPlayingNow: false, recordFinishedPlaying: false});\n    };\n\n    handleGoToListClick = action => {\n        if(this.state.cursor){\n            cursor = animateActions.hideCursor(this.state.cursor);\n        }\n        this.setState({shouldPlayerPause: true, showPlayer: false, isPlayingNow: false, cursor: cursor});\n    };\n\n    render() {\n        const playerScreenWidth = this.state.playerScreenWidth || defaultWidth;\n        const playerScreenHeight = this.state.playerScreenHeight || defaultHeight;\n\n        const content = this.state.showPlayer ?\n            <div id={\"playerCanvas\"} style={{\n                background: 'grey',\n                width: this.state.playerScreenWidth || defaultWidth,\n                height: this.state.playerScreenHeight || defaultHeight\n            }}> </div> :\n            <BasicTable\n                tableHeaders={this.state.tableHeaders || []}\n                tableData={this.state.tableData || []}\n                width={this.state.playerScreenWidth || defaultWidth}\n            />\n\n        return (\n            <div style={{margin: '50px auto', width: playerScreenWidth}}>\n                <MenuBar showPlayer={this.state.showPlayer || false}\n                         handleListClick={() => this.handleGoToListClick()}/>\n                <PlayerCard\n                    pause={() => this.pause()}\n                    play={() => this.resume()}\n                    showPlayer={this.state.showPlayer || false}\n                    isPlayingNow={this.state.isPlayingNow || false}\n                    actionText={this.state.actionText || ''}\n                    playerScreenHeight={playerScreenHeight}\n                    playerScreenWidth={playerScreenWidth}\n                    content={content}\n                />\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}