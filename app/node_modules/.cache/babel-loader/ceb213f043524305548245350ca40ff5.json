{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateHelpers from \"../helpers/animate-helpers.js\";\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\n\nconst axios = require('axios');\n\nlet cursor;\nlet playerWidth = 700;\nlet playerHeight = 400;\nlet capturedSessionScreenSize = 'Recording browser resolution: ' + playerWidth + 'x' + playerHeight;\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resume = action => {\n      if (!this.state.sessionFinishedPlaying) {\n        this.setState({\n          shouldPlayerPause: false\n        });\n        this.play();\n      } else {\n        this.setState({\n          showPlayer: false\n        });\n      }\n    };\n\n    this.pause = action => {\n      this.setState({\n        shouldPlayerPause: true,\n        isPlayingNow: false,\n        sessionFinishedPlaying: false\n      });\n    };\n\n    this.handleGoToListClick = action => {\n      if (this.state.cursor) {\n        cursor = animateHelpers.hideCursor(this.state.cursor);\n      }\n\n      this.resetPlayerWidthAndHeight();\n      this.setState({\n        shouldPlayerPause: true,\n        showPlayer: false,\n        isPlayingNow: false,\n        cursor: cursor\n      });\n    };\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      currentAction: null,\n      sessionFinishedPlaying: true,\n      showPlayer: false,\n      shouldPlayerPause: false,\n      isPlayingNow: false,\n      nowTime: 0,\n      preTime: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getSessions();\n  }\n  /**\n   * getting sessions from db and creating table for the player\n   * @returns {object} {Promise<void>}\n   */\n\n\n  async getSessions() {\n    try {\n      // const callRes = await fetch('http://localhost:3000/server/getSessions', {\n      //     method: 'get',\n      //     dataType: 'json',\n      //     contentType: 'application/json; charset=utf-8'\n      // })\n      const callRes = await axios.get('http://localhost:3000/server/getSessions'); // const finalRes = await callRes.json();\n      // const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n      // if (failedToGetData) {\n      //     console.error('Failed to get records');\n      // } else {\n      //     const sessionsData = finalRes.data || [];\n      //\n      //     const tableData = sessionsData.map((session) => {\n      //         return {\n      //             sessionDate: session.sessionDate,\n      //             duration: session.duration,\n      //             play: <PlayCircleFilledIcon\n      //                 style={{cursor: 'pointer'}}\n      //                 onClick={this.handlePlayFromListClick.bind(this, session.recordEvents)}/>\n      //         }\n      //     });\n      //     this.setState({tableData: tableData || [], sessionsData: sessionsData || []})\n      // }\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayFromListClick(actions) {\n    if (this.state.timeout) {\n      window.clearTimeout(this.state.timeout);\n    }\n\n    this.setState({\n      showPlayer: true,\n      shouldPlayerPause: false\n    }, this.play.bind(this, actions, true));\n  }\n\n  play(actions, isTriggeredFromList = false) {\n    this.setState({\n      isPlayingNow: true,\n      sessionFinishedPlaying: false\n    });\n    this.animateActions(actions, isTriggeredFromList);\n  }\n  /**\n   * animating the mouse events on player\n   * @param {array} actions\n   * @param {boolean} isTriggeredFromList\n   */\n\n\n  animateActions(actions, isTriggeredFromList) {\n    let nowTime = this.state.nowTime;\n    let preTime = this.state.preTime;\n    let actionNumber = this.state.actionNumber;\n    let actionsCount = this.state.actions && this.state.actions.length;\n    let timeout = this.state.timeout;\n    let currentAction = this.state.currentAction;\n    let cursor = this.state.cursor;\n\n    if (actions && isTriggeredFromList) {\n      nowTime = 0;\n      preTime = 0;\n      actionNumber = 0;\n      actionsCount = actions.length;\n      timeout = null;\n      currentAction = null;\n      cursor = null;\n    }\n\n    actions = actions || this.state.actions;\n    cursor = animateHelpers.showCursor(cursor);\n    currentAction = actions[actionNumber]; // resizing player with the screen captured proportion\n\n    if (currentAction.screenProportions) {\n      playerWidth = currentAction.screenProportions.width;\n      playerHeight = currentAction.screenProportions.height;\n      capturedSessionScreenSize = 'Recording browser resolution: ' + currentAction.screenProportions.width + 'x' + currentAction.screenProportions.height;\n\n      while (playerWidth > window.innerWidth || playerHeight > window.innerHeight) {\n        playerWidth = playerWidth * 0.8;\n        playerHeight = playerHeight * 0.8;\n      }\n    } // setting position of mouse\n\n\n    if (currentAction.type === 'move') {\n      cursor = animateHelpers.setCursorPosition(currentAction.x, currentAction.y, currentAction.screenProportions, playerWidth, playerHeight, cursor);\n    } // showing mouse click\n\n\n    if (currentAction.type === 'click') {\n      cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, false);\n      this.updateActionText('Mouse click');\n    } // showing mouse right click\n\n\n    if (currentAction.type === 'rightClick') {\n      cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, true);\n      this.updateActionText('Mouse right click');\n    } // showing mouse scroll\n\n\n    if (currentAction.type === 'scroll') {\n      //window.scrollTo(currentAction.x, currentAction.y);\n      let direction = '';\n\n      if (currentAction.y > -0) {\n        direction += 'scroll up';\n      } else if (currentAction.y < -0) {\n        direction += 'scroll down';\n      } else if (currentAction.x < -0) {\n        direction += 'scroll left';\n      } else if (currentAction.x < -0) {\n        direction += 'scroll right';\n      }\n\n      cursor = animateHelpers.showScrollPointer(cursor, direction);\n      let text = 'Mouse ' + direction;\n      this.updateActionText(text);\n    } // set for showing the  mouse movement int the right time\n\n\n    preTime = nowTime;\n    nowTime = currentAction.time;\n    actionNumber++; // once the session events are done we clear data\n\n    if (actionNumber === actionsCount) {\n      console.log('Finished playing recording');\n      window.clearTimeout(timeout);\n      cursor = animateHelpers.hideCursor(cursor);\n      this.clearPlayerData();\n    } else {\n      //recursively animating the mouse events in case users didnt press the pause button\n      timeout = setTimeout(() => {\n        if (!this.state.shouldPlayerPause) {\n          this.setState({\n            actionNumber: actionNumber,\n            actions: actions,\n            cursor: cursor,\n            timeout: timeout,\n            actionsCount: actionsCount,\n            currentAction: currentAction,\n            nowTime: nowTime,\n            preTime: preTime\n          });\n          this.animateActions(null, false);\n        }\n      }, nowTime - preTime);\n    }\n  }\n\n  updateActionText(action) {\n    if (action !== this.state.actionText) {\n      this.setState({\n        actionText: action\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            actionText: ''\n          });\n        }, 700);\n      });\n    }\n  }\n\n  clearPlayerData() {\n    this.resetPlayerWidthAndHeight();\n    this.setState({\n      actionNumber: 0,\n      actions: [],\n      cursor: null,\n      timeout: null,\n      actionsCount: 0,\n      isPlayingNow: false,\n      showPlayer: false,\n      sessionFinishedPlaying: true\n    });\n  }\n\n  resetPlayerWidthAndHeight() {\n    playerWidth = 700;\n    playerHeight = 400;\n  }\n\n  getPlayerContent() {\n    return this.state.showPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playerCanvas\",\n      style: {\n        background: '#cbcbcb',\n        width: playerWidth,\n        height: playerHeight\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'right',\n          position: 'relative',\n          top: 10,\n          right: 13,\n          fontSize: 12\n        },\n        children: capturedSessionScreenSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(BasicTable, {\n      tableHeaders: this.state.tableHeaders || [],\n      tableData: this.state.tableData || [],\n      width: playerWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const playerContent = this.getPlayerContent();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '50px auto',\n        width: playerWidth\n      },\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n        showPlayer: this.state.showPlayer || false,\n        handleListClick: () => this.handleGoToListClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerCard, {\n        pause: () => this.pause(),\n        play: () => this.resume(),\n        showPlayer: this.state.showPlayer || false,\n        isPlayingNow: this.state.isPlayingNow || false,\n        actionText: this.state.actionText || '',\n        playerScreenHeight: playerHeight,\n        playerScreenWidth: playerWidth,\n        content: playerContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateHelpers","MenuBar","PlayerCard","PlayCircleFilledIcon","axios","require","cursor","playerWidth","playerHeight","capturedSessionScreenSize","Player","Component","constructor","props","resume","action","state","sessionFinishedPlaying","setState","shouldPlayerPause","play","showPlayer","pause","isPlayingNow","handleGoToListClick","hideCursor","resetPlayerWidthAndHeight","tableHeaders","tableData","currentAction","nowTime","preTime","componentDidMount","getSessions","callRes","get","ex","console","error","handlePlayFromListClick","actions","timeout","window","clearTimeout","bind","isTriggeredFromList","animateActions","actionNumber","actionsCount","length","showCursor","screenProportions","width","height","innerWidth","innerHeight","type","setCursorPosition","x","y","clickOnElementAtPosition","updateActionText","direction","showScrollPointer","text","time","log","clearPlayerData","setTimeout","actionText","getPlayerContent","background","textAlign","position","top","right","fontSize","render","playerContent","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateHelpers from \"../helpers/animate-helpers.js\";\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nconst axios = require('axios');\n\nlet cursor;\nlet playerWidth = 700;\nlet playerHeight = 400;\nlet capturedSessionScreenSize = 'Recording browser resolution: ' + playerWidth + 'x' + playerHeight;\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            currentAction: null,\n            sessionFinishedPlaying: true,\n            showPlayer: false,\n            shouldPlayerPause: false,\n            isPlayingNow: false,\n            nowTime: 0,\n            preTime: 0\n        }\n    }\n\n    componentDidMount() {\n        this.getSessions();\n    }\n\n    /**\n     * getting sessions from db and creating table for the player\n     * @returns {object} {Promise<void>}\n     */\n    async getSessions() {\n        try {\n            // const callRes = await fetch('http://localhost:3000/server/getSessions', {\n            //     method: 'get',\n            //     dataType: 'json',\n            //     contentType: 'application/json; charset=utf-8'\n            // })\n            const callRes = await axios.get('http://localhost:3000/server/getSessions');\n\n            // const finalRes = await callRes.json();\n            // const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            // if (failedToGetData) {\n            //     console.error('Failed to get records');\n            // } else {\n            //     const sessionsData = finalRes.data || [];\n            //\n            //     const tableData = sessionsData.map((session) => {\n            //         return {\n            //             sessionDate: session.sessionDate,\n            //             duration: session.duration,\n            //             play: <PlayCircleFilledIcon\n            //                 style={{cursor: 'pointer'}}\n            //                 onClick={this.handlePlayFromListClick.bind(this, session.recordEvents)}/>\n            //         }\n            //     });\n            //     this.setState({tableData: tableData || [], sessionsData: sessionsData || []})\n            // }\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayFromListClick(actions) {\n        if (this.state.timeout) {\n            window.clearTimeout(this.state.timeout);\n        }\n        this.setState({showPlayer: true, shouldPlayerPause: false}, this.play.bind(this, actions, true))\n    }\n\n    play(actions, isTriggeredFromList = false) {\n        this.setState({isPlayingNow: true, sessionFinishedPlaying: false});\n        this.animateActions(actions, isTriggeredFromList)\n    }\n\n    /**\n     * animating the mouse events on player\n     * @param {array} actions\n     * @param {boolean} isTriggeredFromList\n     */\n    animateActions(actions, isTriggeredFromList) {\n        let nowTime = this.state.nowTime;\n        let preTime = this.state.preTime;\n        let actionNumber = this.state.actionNumber;\n        let actionsCount = this.state.actions && this.state.actions.length;\n        let timeout = this.state.timeout;\n        let currentAction = this.state.currentAction;\n        let cursor = this.state.cursor;\n\n        if (actions && isTriggeredFromList) {\n            nowTime = 0;\n            preTime = 0;\n            actionNumber = 0;\n            actionsCount = actions.length;\n            timeout = null;\n            currentAction = null;\n            cursor = null;\n        }\n\n        actions = actions || this.state.actions;\n        cursor = animateHelpers.showCursor(cursor);\n        currentAction = actions[actionNumber];\n\n        // resizing player with the screen captured proportion\n        if (currentAction.screenProportions) {\n            playerWidth = currentAction.screenProportions.width;\n            playerHeight = currentAction.screenProportions.height;\n            capturedSessionScreenSize = 'Recording browser resolution: ' + currentAction.screenProportions.width + 'x' + currentAction.screenProportions.height;\n\n            while (playerWidth > window.innerWidth || playerHeight > window.innerHeight) {\n                playerWidth = playerWidth * 0.8;\n                playerHeight = playerHeight * 0.8;\n            }\n        }\n        // setting position of mouse\n        if (currentAction.type === 'move') {\n            cursor = animateHelpers.setCursorPosition(currentAction.x, currentAction.y,\n                currentAction.screenProportions, playerWidth, playerHeight, cursor);\n        }\n\n        // showing mouse click\n        if (currentAction.type === 'click') {\n            cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, false);\n            this.updateActionText('Mouse click');\n        }\n        // showing mouse right click\n        if (currentAction.type === 'rightClick') {\n            cursor = animateHelpers.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor, true);\n            this.updateActionText('Mouse right click');\n        }\n\n        // showing mouse scroll\n        if (currentAction.type === 'scroll') {\n            //window.scrollTo(currentAction.x, currentAction.y);\n            let direction = '';\n            if (currentAction.y > -0) {\n                direction += 'scroll up';\n            } else if (currentAction.y < -0) {\n                direction += 'scroll down';\n            } else if (currentAction.x < -0) {\n                direction += 'scroll left';\n            } else if (currentAction.x < -0) {\n                direction += 'scroll right';\n            }\n\n            cursor = animateHelpers.showScrollPointer(cursor, direction);\n            let text = 'Mouse ' + direction;\n            this.updateActionText(text);\n        }\n\n        // set for showing the  mouse movement int the right time\n        preTime = nowTime;\n        nowTime = currentAction.time;\n        actionNumber++;\n\n        // once the session events are done we clear data\n        if (actionNumber === actionsCount) {\n            console.log('Finished playing recording');\n            window.clearTimeout(timeout);\n            cursor = animateHelpers.hideCursor(cursor);\n            this.clearPlayerData();\n        } else {\n\n            //recursively animating the mouse events in case users didnt press the pause button\n            timeout = setTimeout(() => {\n                if (!this.state.shouldPlayerPause) {\n                    this.setState({actionNumber: actionNumber, actions: actions, cursor: cursor, timeout: timeout,\n                        actionsCount: actionsCount, currentAction: currentAction, nowTime: nowTime, preTime: preTime\n                    });\n                    this.animateActions(null,false);\n                }\n            }, nowTime - preTime);\n        }\n    }\n\n    updateActionText(action) {\n        if(action !== this.state.actionText){\n            this.setState({actionText: action}, () => {\n                setTimeout(() => {\n                    this.setState({actionText: ''})\n                }, 700);\n            })\n        }\n    }\n\n    clearPlayerData() {\n        this.resetPlayerWidthAndHeight()\n        this.setState({\n            actionNumber: 0, actions: [], cursor: null,\n            timeout: null, actionsCount: 0, isPlayingNow: false, showPlayer: false,\n            sessionFinishedPlaying: true\n        });\n    }\n\n    resetPlayerWidthAndHeight() {\n        playerWidth = 700\n        playerHeight = 400;\n    }\n\n    resume = action => {\n        if(!this.state.sessionFinishedPlaying){\n            this.setState({shouldPlayerPause: false});\n            this.play();\n        } else{\n            this.setState({showPlayer: false});\n        }\n    };\n\n    pause = action => {\n        this.setState({shouldPlayerPause: true, isPlayingNow: false, sessionFinishedPlaying: false});\n    };\n\n    handleGoToListClick = action => {\n        if(this.state.cursor){\n            cursor = animateHelpers.hideCursor(this.state.cursor);\n        }\n        this.resetPlayerWidthAndHeight()\n        this.setState({shouldPlayerPause: true, showPlayer: false, isPlayingNow: false, cursor: cursor});\n    };\n\n    getPlayerContent() {\n        return (this.state.showPlayer ?\n            <div id={\"playerCanvas\"} style={{background: '#cbcbcb', width: playerWidth, height: playerHeight}}>\n                <div style={{textAlign: 'right', position: 'relative', top: 10, right: 13, fontSize: 12}}>{capturedSessionScreenSize}</div>\n            </div> :\n            <BasicTable\n                tableHeaders={this.state.tableHeaders || []}\n                tableData={this.state.tableData || []}\n                width={playerWidth}\n            />);\n    }\n\n    render() {\n        const playerContent = this.getPlayerContent();\n\n        return (\n            <div style={{margin: '50px auto', width: playerWidth}}>\n                <MenuBar showPlayer={this.state.showPlayer || false}\n                         handleListClick={() => this.handleGoToListClick()}/>\n                <PlayerCard\n                    pause={() => this.pause()}\n                    play={() => this.resume()}\n                    showPlayer={this.state.showPlayer || false}\n                    isPlayingNow={this.state.isPlayingNow || false}\n                    actionText={this.state.actionText || ''}\n                    playerScreenHeight={playerHeight}\n                    playerScreenWidth={playerWidth}\n                    content={playerContent}\n                />\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}