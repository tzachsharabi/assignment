{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateActions from \"../helpers/animate-helpers.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nlet defaultWidth = 800;\nlet defaultHeight = 500;\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resume = action => {\n      if (!this.state.recordFinishedPlaying) {\n        this.setState({\n          shouldPlayerPause: false\n        });\n        this.play();\n      } else {\n        this.setState({\n          showPlayer: false\n        });\n      }\n    };\n\n    this.pause = action => {\n      this.setState({\n        shouldPlayerPause: true,\n        isPlayingNow: false,\n        recordFinishedPlaying: false\n      });\n    };\n\n    this.handleGoToListClick = action => {\n      if (this.state.cursor) {\n        cursor = animateActions.hideCursor(this.state.cursor);\n      }\n\n      this.setState({\n        shouldPlayerPause: true,\n        showPlayer: false,\n        isPlayingNow: false,\n        cursor: cursor\n      });\n    };\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      showPlayer: false,\n      shouldPlayerPause: false,\n      isPlayingNow: false,\n      recordFinishedPlaying: true\n    };\n  }\n\n  componentDidMount() {\n    this.getSessions();\n  }\n\n  async getSessions() {\n    try {\n      const callRes = await fetch('http://localhost:3000/server/getSessions', {\n        // const callRes = await fetch('http://localhost:5000/server/getSessions', {\n        method: 'get',\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      });\n      const finalRes = await callRes.json();\n      const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n\n      if (failedToGetData) {\n        console.error('Failed to get records');\n      } else {\n        const sessionsData = finalRes.data || [];\n        const tableData = sessionsData.map(session => {\n          return {\n            sessionDate: session.sessionDate,\n            duration: session.duration,\n            play: /*#__PURE__*/_jsxDEV(PlayCircleFilledIcon, {\n              style: {\n                cursor: 'pointer'\n              },\n              onClick: this.handlePlayFromListClick.bind(this, session.recordEvents)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 31\n            }, this)\n          };\n        });\n        this.setState({\n          tableData: tableData || [],\n          sessionsData: sessionsData || []\n        });\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayFromListClick(actions) {\n    if (this.state.timeout) {\n      window.clearTimeout(this.state.timeout);\n    }\n\n    this.setState({\n      showPlayer: true,\n      shouldPlayerPause: false\n    }, this.play.bind(this, actions));\n  }\n\n  play(actions) {\n    this.setState({\n      isPlayingNow: true,\n      recordFinishedPlaying: false\n    });\n    this.animateActions(actions);\n  }\n\n  animateActions(actions) {\n    let nowTime = this.state.nowTime;\n    let preTime = this.state.preTime;\n    let actionNumber = this.state.actionNumber;\n    let actionsCount = this.state.actions && this.state.actions.length;\n    let timeout = this.state.timeout;\n    let currentAction = this.state.currentAction;\n    let cursor = this.state.cursor;\n\n    if (actions) {\n      nowTime = 0;\n      preTime = 0;\n      actionNumber = 0;\n      actionsCount = actions.length;\n      timeout = null;\n      currentAction = null;\n      cursor = null;\n    }\n\n    actions = actions || this.state.actions;\n    cursor = animateActions.showCursor(cursor);\n    currentAction = actions[actionNumber];\n\n    if (currentAction.screenProportions) {\n      defaultWidth = currentAction.screenProportions.width;\n      defaultHeight = currentAction.screenProportions.height;\n\n      while (defaultWidth > 700 || defaultHeight > 400) {\n        defaultWidth = defaultWidth / 2;\n        defaultHeight = defaultHeight / 2;\n      }\n    }\n\n    if (currentAction.type === 'move') {\n      cursor = animateActions.setCursorPosition(currentAction.x, currentAction.y, currentAction.screenProportions, defaultWidth, defaultHeight, cursor);\n    }\n\n    if (currentAction.type === 'click') {\n      cursor = animateActions.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor);\n      this.updateActionText('Mouse click');\n    }\n\n    if (currentAction.type === 'scroll') {\n      window.scrollTo(currentAction.x, currentAction.y);\n      let text = 'Mouse scroll ';\n\n      if (currentAction.y > -0) {\n        text += 'up';\n      } else if (currentAction.y < -0) {\n        text += 'down';\n      } else if (currentAction.x < -0) {\n        text += 'left';\n      } else if (currentAction.x < -0) {\n        text += 'right';\n      }\n\n      this.updateActionText(text);\n    }\n\n    preTime = nowTime;\n    nowTime = currentAction.time;\n    actionNumber++;\n\n    if (actionNumber === actionsCount) {\n      console.log('Finished playing recording');\n      window.clearTimeout(timeout);\n      cursor = animateActions.hideCursor(cursor);\n      this.clearPlayerData();\n    } else {\n      timeout = setTimeout(() => {\n        if (!this.state.shouldPlayerPause) {\n          this.setState({\n            actionNumber: actionNumber,\n            actions: actions,\n            cursor: cursor,\n            timeout: timeout,\n            actionsCount: actionsCount,\n            currentAction: currentAction,\n            nowTime: nowTime,\n            preTime: preTime\n          });\n          this.animateActions();\n        }\n      }, nowTime - preTime);\n    }\n  }\n\n  updateActionText(action) {\n    if (action !== this.state.actionText) {\n      this.setState({\n        actionText: action\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            actionText: ''\n          });\n        }, 700);\n      });\n    }\n  }\n\n  clearPlayerData() {\n    this.setState({\n      actionNumber: 0,\n      actions: [],\n      cursor: null,\n      timeout: null,\n      actionsCount: 0,\n      isPlayingNow: false,\n      showPlayer: false,\n      recordFinishedPlaying: true\n    });\n  }\n\n  render() {\n    const content = this.state.showPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playerCanvas\",\n      style: {\n        background: 'grey',\n        width: defaultWidth || defaultWidth,\n        height: defaultHeight\n      },\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(BasicTable, {\n      tableHeaders: this.state.tableHeaders || [],\n      tableData: this.state.tableData || [],\n      width: defaultWidth || defaultWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '50px auto',\n        width: defaultWidth\n      },\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n        showPlayer: this.state.showPlayer || false,\n        handleListClick: () => this.handleGoToListClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerCard, {\n        pause: () => this.pause(),\n        play: () => this.resume(),\n        showPlayer: this.state.showPlayer || false,\n        isPlayingNow: this.state.isPlayingNow || false,\n        actionText: this.state.actionText || '',\n        playerScreenHeight: defaultHeight,\n        playerScreenWidth: defaultWidth,\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateActions","cursor","MenuBar","PlayerCard","PlayCircleFilledIcon","defaultWidth","defaultHeight","Player","Component","constructor","props","resume","action","state","recordFinishedPlaying","setState","shouldPlayerPause","play","showPlayer","pause","isPlayingNow","handleGoToListClick","hideCursor","tableHeaders","tableData","componentDidMount","getSessions","callRes","fetch","method","dataType","contentType","finalRes","json","failedToGetData","data","statusCode","console","error","sessionsData","map","session","sessionDate","duration","handlePlayFromListClick","bind","recordEvents","ex","actions","timeout","window","clearTimeout","nowTime","preTime","actionNumber","actionsCount","length","currentAction","showCursor","screenProportions","width","height","type","setCursorPosition","x","y","clickOnElementAtPosition","updateActionText","scrollTo","text","time","log","clearPlayerData","setTimeout","actionText","render","content","background","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BasicTable from \"./components/table.jsx\";\nimport animateActions from \"../helpers/animate-helpers.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport PlayerCard from \"./components/playerCard\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nlet defaultWidth = 800;\nlet defaultHeight = 500;\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            showPlayer: false,\n            shouldPlayerPause: false,\n            isPlayingNow: false,\n            recordFinishedPlaying: true\n        }\n    }\n    componentDidMount() {\n        this.getSessions();\n    }\n\n    async getSessions() {\n        try {\n            const callRes = await fetch('http://localhost:3000/server/getSessions', {\n                // const callRes = await fetch('http://localhost:5000/server/getSessions', {\n                method: 'get',\n                dataType: 'json',\n                contentType: 'application/json; charset=utf-8'\n            })\n            const finalRes = await callRes.json();\n            const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            if (failedToGetData) {\n                console.error('Failed to get records');\n            } else {\n                const sessionsData = finalRes.data || [];\n\n                const tableData = sessionsData.map((session) => {\n                    return {\n                        sessionDate: session.sessionDate,\n                        duration: session.duration,\n                        play: <PlayCircleFilledIcon\n                            style={{cursor: 'pointer'}}\n                            onClick={this.handlePlayFromListClick.bind(this, session.recordEvents)}/>\n                    }\n                });\n                this.setState({tableData: tableData || [], sessionsData: sessionsData || []})\n            }\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayFromListClick(actions) {\n        if (this.state.timeout) {\n            window.clearTimeout(this.state.timeout);\n        }\n        this.setState({showPlayer: true, shouldPlayerPause: false}, this.play.bind(this, actions))\n    }\n\n    play(actions) {\n        this.setState({isPlayingNow: true, recordFinishedPlaying: false});\n        this.animateActions(actions)\n    }\n\n    animateActions(actions) {\n        let nowTime = this.state.nowTime;\n        let preTime = this.state.preTime;\n        let actionNumber = this.state.actionNumber;\n        let actionsCount = this.state.actions && this.state.actions.length;\n        let timeout = this.state.timeout;\n        let currentAction = this.state.currentAction;\n        let cursor = this.state.cursor;\n\n        if (actions) {\n            nowTime = 0; preTime = 0; actionNumber = 0;actionsCount = actions.length;\n            timeout = null; currentAction = null; cursor = null;\n        }\n\n        actions = actions || this.state.actions;\n        cursor = animateActions.showCursor(cursor);\n        currentAction = actions[actionNumber];\n\n        if (currentAction.screenProportions) {\n            defaultWidth = currentAction.screenProportions.width;\n            defaultHeight = currentAction.screenProportions.height;\n           while (defaultWidth > 700 || defaultHeight > 400){\n                defaultWidth = defaultWidth/2;\n                defaultHeight = defaultHeight/2;\n            }\n        }\n\n        if (currentAction.type === 'move') {\n            cursor = animateActions.setCursorPosition(currentAction.x, currentAction.y,\n                currentAction.screenProportions, defaultWidth, defaultHeight, cursor);\n        }\n\n        if (currentAction.type === 'click') {\n            cursor = animateActions.clickOnElementAtPosition(currentAction.x, currentAction.y, currentAction.screenProportions, cursor);\n            this.updateActionText('Mouse click');\n        }\n\n        if (currentAction.type === 'scroll') {\n            window.scrollTo(currentAction.x, currentAction.y);\n            let text = 'Mouse scroll ';\n            if (currentAction.y > -0) {\n                text += 'up';\n            } else if (currentAction.y < -0) {\n                text += 'down';\n            } else if (currentAction.x < -0) {\n                text += 'left';\n            } else if (currentAction.x < -0) {\n                text += 'right';\n            }\n            this.updateActionText(text);\n        }\n\n        preTime = nowTime;\n        nowTime = currentAction.time;\n\n        actionNumber++;\n\n        if (actionNumber === actionsCount) {\n            console.log('Finished playing recording');\n            window.clearTimeout(timeout);\n            cursor = animateActions.hideCursor(cursor);\n            this.clearPlayerData();\n        } else {\n\n            timeout = setTimeout(() => {\n                if (!this.state.shouldPlayerPause) {\n                    this.setState({actionNumber: actionNumber, actions: actions, cursor: cursor, timeout: timeout,\n                        actionsCount: actionsCount, currentAction: currentAction, nowTime: nowTime, preTime: preTime\n                    });\n                    this.animateActions()\n                }\n            }, nowTime - preTime);\n        }\n    }\n\n    updateActionText(action) {\n        if(action !== this.state.actionText){\n            this.setState({actionText: action}, () => {\n                setTimeout(() => {\n                    this.setState({actionText: ''})\n                }, 700);\n            })\n        }\n    }\n\n    clearPlayerData() {\n        this.setState({\n            actionNumber: 0, actions: [], cursor: null,\n            timeout: null, actionsCount: 0, isPlayingNow: false, showPlayer: false,\n            recordFinishedPlaying: true\n        });\n    }\n\n    resume = action => {\n        if(!this.state.recordFinishedPlaying){\n            this.setState({shouldPlayerPause: false});\n            this.play();\n        } else{\n            this.setState({showPlayer: false});\n        }\n    };\n\n    pause = action => {\n        this.setState({shouldPlayerPause: true, isPlayingNow: false, recordFinishedPlaying: false});\n    };\n\n    handleGoToListClick = action => {\n        if(this.state.cursor){\n            cursor = animateActions.hideCursor(this.state.cursor);\n        }\n        this.setState({shouldPlayerPause: true, showPlayer: false, isPlayingNow: false, cursor: cursor});\n    };\n\n    render() {\n        const content = this.state.showPlayer ?\n            <div id={\"playerCanvas\"} style={{\n                background: 'grey',\n                width: defaultWidth || defaultWidth,\n                height: defaultHeight\n            }}> </div> :\n            <BasicTable\n                tableHeaders={this.state.tableHeaders || []}\n                tableData={this.state.tableData || []}\n                width={defaultWidth || defaultWidth}\n            />\n\n        return (\n            <div style={{margin: '50px auto', width: defaultWidth}}>\n                <MenuBar showPlayer={this.state.showPlayer || false}\n                         handleListClick={() => this.handleGoToListClick()}/>\n                <PlayerCard\n                    pause={() => this.pause()}\n                    play={() => this.resume()}\n                    showPlayer={this.state.showPlayer || false}\n                    isPlayingNow={this.state.isPlayingNow || false}\n                    actionText={this.state.actionText || ''}\n                    playerScreenHeight={defaultHeight}\n                    playerScreenWidth={defaultWidth}\n                    content={content}\n                />\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}