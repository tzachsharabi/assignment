{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx\";\nimport React from 'react';\nimport BasicTable from \"./table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport MusicCard from \"./components/musicCard\";\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.next = action => {\n      let current = this.state.current;\n\n      if (action === \"next\") {\n        if (current === db.alternative.length) this.setState({\n          current: 1\n        });else {\n          this.setState({\n            current: this.state.current + 1\n          });\n        }\n      } else {\n        if (current === 1) {\n          this.setState({\n            current: db.alternative.length\n          });\n        } else {\n          this.setState({\n            current: this.state.current - 1\n          });\n        }\n      }\n    };\n\n    this.play = () => {\n      document.getElementById(\"video\").src += \"?autoplay=1\";\n    };\n\n    this.state = {\n      tableHeaders: ['Session Date', 'Duration', 'Play'],\n      tableData: null,\n      showPlayer: false\n    };\n  }\n\n  componentDidMount() {\n    this.getRecords();\n  }\n\n  async getRecords() {\n    try {\n      const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n        // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n        method: 'get',\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      });\n      const finalRes = await callRes.json();\n      const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n\n      if (failedToGetData) {\n        console.error('Failed to get records');\n      }\n\n      const recordsData = finalRes.data.recordsData || [];\n      const tableData = recordsData.map(record => {\n        return {\n          sessionDate: record.sessionDate,\n          duration: record.duration,\n          play: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handlePlayBtnClick.bind(this, record.recordEvents),\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 27\n          }, this)\n        };\n      });\n      this.setState({\n        tableData: tableData || [],\n        recordsData: recordsData || []\n      });\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  handlePlayBtnClick(steps) {\n    this.setState({\n      showPlayer: true\n    }, this.play.bind(this, steps));\n  }\n\n  play(steps) {\n    let preTime = 0;\n    let nowTime = 0;\n    console.log('Playing recording with', steps.length, 'steps');\n    cursor = animateActions.showCursor(cursor);\n    let stepNumber = 0;\n    let stepsCount = steps.length;\n    let timeout, currentStep;\n\n    (function animate() {\n      currentStep = steps[stepNumber];\n\n      if (currentStep.type === 'move') {\n        cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, cursor);\n      }\n\n      if (currentStep.type === 'click') {\n        cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, cursor);\n      }\n\n      if (currentStep.type === 'scroll') {\n        window.scrollTo(currentStep.x, currentStep.y);\n      }\n\n      preTime = nowTime;\n      nowTime = currentStep.time;\n      stepNumber++;\n\n      if (stepNumber === stepsCount) {\n        console.log('Finished playing recording');\n        window.clearTimeout(timeout);\n        cursor = animateActions.hideCursor(cursor);\n      } else {\n        timeout = setTimeout(() => {\n          animate();\n        }, preTime - nowTime);\n      }\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.showPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playerCanvas\",\n        children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MusicCard, {\n          data: db.alternative[this.state.current - 1],\n          next: () => this.next(),\n          play: () => this.play()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 43\n      }, this) : /*#__PURE__*/_jsxDEV(BasicTable, {\n        tableHeaders: this.state.tableHeaders || [],\n        tableData: this.state.tableData || []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/tzach/Downloads/all/Tz Files/project/node-postgres-docker-compose-skeleton-master/app/src/modules/player.jsx"],"names":["React","BasicTable","animateActions","cursor","MenuBar","MusicCard","Player","Component","constructor","props","next","action","current","state","db","alternative","length","setState","play","document","getElementById","src","tableHeaders","tableData","showPlayer","componentDidMount","getRecords","callRes","fetch","method","dataType","contentType","finalRes","json","failedToGetData","data","statusCode","console","error","recordsData","map","record","sessionDate","duration","handlePlayBtnClick","bind","recordEvents","ex","steps","preTime","nowTime","log","showCursor","stepNumber","stepsCount","timeout","currentStep","animate","type","setCursorPosition","x","y","clickOnElementAtPosition","window","scrollTo","time","clearTimeout","hideCursor","setTimeout","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BasicTable from \"./table.jsx\";\nimport animateActions from \"./animate.js\";\nlet cursor;\nimport MenuBar from \"./components/menuBar\";\nimport MusicCard from \"./components/musicCard\";\n\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            tableHeaders: ['Session Date', 'Duration', 'Play'],\n            tableData: null,\n            showPlayer: false\n        }\n    }\n    componentDidMount() {\n        this.getRecords();\n    }\n\n    async getRecords() {\n        try {\n            const callRes = await fetch('http://localhost:3000/test_db/getRecords', {\n                // const res = await fetch('http://localhost:5000/test_db/saveRecord', {\n                method: 'get',\n                dataType: 'json',\n                contentType: 'application/json; charset=utf-8'\n            })\n            const finalRes = await callRes.json();\n            const failedToGetData = !(finalRes && finalRes.data && finalRes.statusCode === 200);\n            if (failedToGetData) {\n                console.error('Failed to get records');\n            }\n            const recordsData = finalRes.data.recordsData || [];\n            const tableData = recordsData.map((record) =>{\n                return {\n                    sessionDate: record.sessionDate,\n                    duration: record.duration,\n                    play: <button onClick={this.handlePlayBtnClick.bind(this, record.recordEvents)}>Play</button>\n                }\n            });\n            this.setState({tableData: tableData || [], recordsData: recordsData || []})\n        } catch (ex) {\n            console.error(ex)\n        }\n    }\n\n    handlePlayBtnClick(steps) {\n        this.setState({showPlayer: true}, this.play.bind(this, steps))\n    }\n\n    play(steps) {\n        let preTime = 0;\n        let nowTime = 0;\n        console.log('Playing recording with', steps.length, 'steps');\n\n        cursor = animateActions.showCursor(cursor);\n\n        let stepNumber = 0;\n        let stepsCount = steps.length;\n        let timeout, currentStep;\n\n        (function animate() {\n            currentStep = steps[stepNumber];\n            if (currentStep.type === 'move') {\n                cursor = animateActions.setCursorPosition(currentStep.x, currentStep.y, cursor);\n            }\n\n            if (currentStep.type === 'click') {\n                cursor = animateActions.clickOnElementAtPosition(currentStep.x, currentStep.y, cursor);\n            }\n\n            if (currentStep.type === 'scroll') {\n                window.scrollTo(currentStep.x, currentStep.y);\n            }\n\n            preTime = nowTime;\n            nowTime = currentStep.time;\n\n            stepNumber++;\n\n            if (stepNumber === stepsCount) {\n                console.log('Finished playing recording');\n                window.clearTimeout(timeout);\n                cursor = animateActions.hideCursor(cursor);\n            } else {\n                timeout = setTimeout(() => {animate()}, preTime - nowTime);\n            }\n        }());\n    }\n\n    next = action => {\n        let current = this.state.current;\n        if (action === \"next\") {\n            if (current === db.alternative.length) this.setState({ current: 1 });\n            else {\n                this.setState({ current: this.state.current + 1 });\n            }\n        } else {\n            if (current === 1) {\n                this.setState({ current: db.alternative.length });\n            } else {\n                this.setState({ current: this.state.current - 1 });\n            }\n        }\n    };\n    play = () => {\n        document.getElementById(\"video\").src += \"?autoplay=1\";\n    };\n\n    render() {\n        return (\n            <div >\n                {this.state.showPlayer ?  <div id={\"playerCanvas\"}>\n                        <MenuBar />\n                        <MusicCard\n                            data={db.alternative[this.state.current - 1]}\n                            next={() => this.next()}\n                            play={() => this.play()}\n                        />\n                    </div> :\n                    <BasicTable\n                    tableHeaders={this.state.tableHeaders || []}\n                    tableData={this.state.tableData || []}\n                />}\n            </div>\n        );\n    }\n}\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}